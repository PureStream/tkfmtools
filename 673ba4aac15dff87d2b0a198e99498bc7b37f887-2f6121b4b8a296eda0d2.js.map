{"version":3,"sources":["webpack://tkfmtools/./src/components/CharPotential.js","webpack://tkfmtools/./src/components/ItemShowcase.js"],"names":["Select","styled","Form","props","theme","colors","surface","onSurface","secondary","NumForm","as","minNum","maxNum","onChange","defaultValue","disabled","value","Array","keys","slice","map","i","key","TwoStageForm","title","handleSelect","subMinNum","selectAttrs","defaultValues","Col","undefined","StyledForm","CharContainer","CharImgWrapper","ImageSupplier","Gutter","CharSelectPanel","children","className","character","lumpNRChars","useContext","LanguageContext","pageString","charString","widthConfig","default","992","MyHeader","characters","potential","characterPanelTitle","titleIcon","RaceIcon","name","alt","onSubmit","event","preventDefault","characterSelectTitle","charData","char","idx","rarity","id","nr","MaterialWrapper","Object","entries","$layoutConfig","entry","UiImg","UiImgWrapper","layoutConfig","MaterialCard","ItemCard","MaterialBox","result","items","item","money","StyledPanel","FilterPanel","MaterialContainer","resultLayoutConfig","1360","1200","768","0","624","ResultPanel","handleModalOpen","userLanguage","resultDemandTitle","ItemIcon","withHelp","onClickHelp","resultBuffTitle","BuffIcon","buff","ATK","HP","PASSIVE","calcPotential","from","to","type","c","potentialType","stages","potentialData","stage","j","pattern","rank","num","parsedItem","parseInt","toString","CalculatorContainer","TableGutter","resultPanelWidthConfig","CharPotential","useState","currStage","currSub","targetStage","targetSub","isHelpModalOpen","state","setState","attr","newState","selected","target","Math","max","round","maxStage","handelHelpModal","boolean","currentSelectTitle","targetSelectTitle","helpModal","open","onClose","content","ariaLabelledby","ariaDescribedby","ItemImg","ImgCard","TextWrapper","itemString","imgType","imgId","StyledTh","SortableTh","onSecondary","$sortable","TableHead","React","ref","drop","index","tableHead","requestSort","getSortDirection","sortable","onClick","direction","ItemWrapper","ItemsContainer","StyledBadge","Badge","$rarity","TableBody","trRef","useRef","useImperativeHandle","getY","current","getBoundingClientRect","y","getBottom","bottom","sortedResult","renderTo","itemTd","length","pill","chapter","materials","trainItems","expPotions","energy","TableWrapper","ScrollableContainer","data","stageDropData","head","body","sortFunc","sortableItems","sortConfig","toStageKey","split","includes","sort","a","b","aKey","bKey","defaultSortKey","border"],"mappings":"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","file":"673ba4aac15dff87d2b0a198e99498bc7b37f887-2f6121b4b8a296eda0d2.js","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Col, Form } from 'react-bootstrap';\r\nimport { FilterPanel } from './FilterComponents';\r\nimport MyHeader from './MyHeader';\r\nimport { ItemCard } from './ItemShowcase';\r\nimport ImageSupplier from './ImageSupplier';\r\nimport { TextModal } from './MyModal';\r\nimport { LanguageContext } from './LanguageProvider';\r\nimport { BuffIcon, ItemIcon, RaceIcon } from './icon';\r\nimport charData from 'gamedata/character.json';\r\nimport potentialData from 'gamedata/potential.json';\r\n\r\nexport const Select = styled(Form.Control)`\r\n    && {\r\n        background-color: ${props => props.theme.colors.surface};\r\n        color: ${props => props.theme.colors.onSurface};\r\n        border-radius: .25rem;\r\n        padding: .1rem;\r\n        border: 1px solid ${props => props.theme.colors.secondary};\r\n        width: 100%;\r\n        height: 1.6rem;\r\n        &:focus {\r\n            box-shadow: 0 0 .4rem ${props => props.theme.colors.secondary};\r\n        }\r\n    }\r\n`\r\nexport const NumForm = ({\r\n    as,\r\n    minNum,\r\n    maxNum,\r\n    onChange,\r\n    defaultValue,\r\n    disabled\r\n}) => (\r\n    <Form.Group as={as}>\r\n        <Select\r\n            as=\"select\"\r\n            value={defaultValue}\r\n            onChange={onChange}\r\n            disabled={disabled}\r\n        >\r\n            {disabled\r\n                ? <option>-</option>\r\n                : [...Array(maxNum + 1).keys()].slice(minNum)\r\n                    .map(i => <option value={i} key={i}>{i}</option>)}\r\n        </Select>\r\n    </Form.Group>\r\n)\r\n\r\nexport const TwoStageForm = ({\r\n    title,\r\n    handleSelect,\r\n    subMinNum,\r\n    minNum,\r\n    maxNum,\r\n    selectAttrs,\r\n    defaultValues\r\n}) => (\r\n    <>\r\n        {title}\r\n        <Form.Row>\r\n            <NumForm\r\n                as={Col}\r\n                minNum={minNum}\r\n                maxNum={maxNum}\r\n                onChange={handleSelect(selectAttrs[0])}\r\n                defaultValue={defaultValues ? defaultValues[0] : undefined}\r\n            />\r\n            {'–'}\r\n            <NumForm\r\n                as={Col}\r\n                minNum={subMinNum}\r\n                maxNum={6}\r\n                onChange={handleSelect(selectAttrs[1])}\r\n                defaultValue={defaultValues ? defaultValues[1] : undefined}\r\n            />\r\n        </Form.Row>\r\n    </>\r\n)\r\n\r\nconst StyledForm = styled(Form)`\r\n    form {\r\n        width: 13.5rem;\r\n        > div:last-child > div {\r\n        margin-bottom: 0;\r\n        }\r\n    }\r\n`\r\nconst CharContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n`\r\nconst CharImgWrapper = styled(ImageSupplier)`\r\n    width: 5.1rem;\r\n    margin-right: 1rem;\r\n    border: 2px solid ${props => props.theme.colors.secondary};\r\n    border-radius: .25rem;\r\n`\r\nconst Gutter = styled.div`\r\n    margin-top: 4rem;\r\n`\r\nexport const CharSelectPanel = ({\r\n    children,\r\n    className,\r\n    character,\r\n    handleSelect,\r\n    lumpNRChars,\r\n}) => {\r\n    const { pageString, charString } = useContext(LanguageContext)\r\n\r\n    const widthConfig = {\r\n        default: '25%',\r\n        992: '100%',\r\n    }\r\n\r\n    return (\r\n        <FilterPanel\r\n            widthConfig={widthConfig}\r\n            className={className}\r\n        >\r\n            <MyHeader\r\n                title={pageString.characters.potential.characterPanelTitle}\r\n                titleIcon={RaceIcon}\r\n            />\r\n            <CharContainer>\r\n                <CharImgWrapper\r\n                    name={`char_${character}`}\r\n                    alt=''\r\n                />\r\n                <StyledForm onSubmit={(event) => event.preventDefault()}>\r\n                    {pageString.characters.potential.characterSelectTitle}\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Select\r\n                                as=\"select\"\r\n                                onChange={handleSelect('character')}\r\n                            >\r\n                                {charData.map((char, idx) => {\r\n                                    if (char.rarity < 2 && lumpNRChars) {\r\n                                        return false\r\n                                    }\r\n\r\n                                    return (\r\n                                        <option value={char.id} key={idx}>\r\n                                            {charString.name[char.id]}\r\n                                        </option>\r\n                                    )\r\n                                })}\r\n                                {lumpNRChars\r\n                                    ? <option value={'nr'} key={'nr'}>\r\n                                        {charString.name.nr}\r\n                                    </option>\r\n                                    : null}\r\n                            </Select>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    {children}\r\n                </StyledForm>\r\n            </CharContainer>\r\n        </FilterPanel >\r\n    )\r\n}\r\n\r\nconst MaterialWrapper = styled.span`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 .4rem;\r\n    margin: .2rem 0;\r\n    ${props => Object.entries(props.$layoutConfig).map(entry => (\r\n    `@media screen and (min-width: ${entry[0]}px) {\r\n            width: calc(100% / ${entry[1]});\r\n        }\r\n        `\r\n))}\r\n    > div {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n`\r\nconst UiImg = styled(ImageSupplier)`\r\n    width: 1.6rem;\r\n    height: 1.6rem;\r\n    margin-right: .4rem;\r\n`\r\nconst UiImgWrapper = ({\r\n    children,\r\n    layoutConfig,\r\n    name,\r\n    alt\r\n}) => (\r\n    <MaterialWrapper\r\n        $layoutConfig={layoutConfig}\r\n    >\r\n        <div>\r\n            <UiImg\r\n                name={name}\r\n                alt={alt}\r\n            />\r\n            {children}\r\n        </div>\r\n    </MaterialWrapper>\r\n)\r\n\r\nconst MaterialCard = styled(ItemCard)`\r\n    > div:first-child {\r\n        width: 2rem;\r\n        height: 2rem;\r\n        margin-right: .4rem;\r\n    }\r\n`\r\nconst MaterialBox = ({\r\n    result,\r\n    layoutConfig\r\n}) => {\r\n    if (!result.items) return null\r\n\r\n    return (\r\n        <>\r\n            {Object.entries(result.items).map((item, idx) => (\r\n                <MaterialWrapper\r\n                    key={idx}\r\n                    $layoutConfig={layoutConfig}\r\n                >\r\n                    <div>\r\n                        <MaterialCard\r\n                            id={item[0]}\r\n                            alt=''\r\n                        />\r\n                    </div>\r\n                    {item[1]}\r\n                </MaterialWrapper>\r\n            ))}\r\n            <UiImgWrapper\r\n                name='money'\r\n                alt='money'\r\n                layoutConfig={layoutConfig}\r\n            >\r\n                {result.money}\r\n            </UiImgWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledPanel = styled(FilterPanel)`\r\n    @media screen and (max-width: 992px) {\r\n        width: ${props => props.widthConfig[992]};\r\n        margin-left: calc(100% - ${props => props.widthConfig[992]});\r\n        position: relative;\r\n        margin-top: 1rem;\r\n    }\r\n`\r\nconst MaterialContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 1rem;\r\n    min-height: 6rem;\r\n`\r\nconst resultLayoutConfig = {\r\n    'en': {\r\n        1360: 5,\r\n        1200: 4,\r\n        768: 3,\r\n        0: 2\r\n    },\r\n    'zh-TW': {\r\n        1360: 6,\r\n        1200: 5,\r\n        768: 4,\r\n        624: 3,\r\n        0: 2\r\n    }\r\n}\r\n\r\nconst ResultPanel = ({\r\n    widthConfig,\r\n    result,\r\n    handleModalOpen\r\n}) => {\r\n    const { userLanguage, pageString } = useContext(LanguageContext)\r\n\r\n    return (\r\n        <StyledPanel widthConfig={widthConfig}>\r\n            <div>\r\n                <MyHeader\r\n                    title={pageString.characters.potential.resultDemandTitle}\r\n                    titleIcon={ItemIcon}\r\n                    withHelp\r\n                    onClickHelp={handleModalOpen}\r\n                />\r\n                <MaterialContainer>\r\n                    <MaterialBox\r\n                        result={result}\r\n                        layoutConfig={resultLayoutConfig[userLanguage]}\r\n                    />\r\n                </MaterialContainer>\r\n            </div>\r\n            <div>\r\n                <MyHeader\r\n                    title={pageString.characters.potential.resultBuffTitle}\r\n                    titleIcon={BuffIcon}\r\n                />\r\n                <div>\r\n                    <UiImgWrapper\r\n                        layoutConfig={resultLayoutConfig[userLanguage]}\r\n                        name='ui_small_atk'\r\n                        alt='ATK'\r\n                    >\r\n                        {`${result.buff.ATK} %`}\r\n                    </UiImgWrapper>\r\n                    <UiImgWrapper\r\n                        layoutConfig={resultLayoutConfig[userLanguage]}\r\n                        name='ui_small_hp'\r\n                        alt='HP'\r\n                    >\r\n                        {`${result.buff.HP} %`}\r\n                    </UiImgWrapper>\r\n                    <UiImgWrapper\r\n                        layoutConfig={resultLayoutConfig[userLanguage]}\r\n                        name='ui_small_potentialPassive'\r\n                        alt='Passive'\r\n                    >\r\n                        {`${result.buff.PASSIVE === 0 ? '-'\r\n                            : result.buff.PASSIVE === 1 ? '1'\r\n                                : result.buff.PASSIVE === 2 ? '2'\r\n                                    : '1 & 2'\r\n                            }`}\r\n                    </UiImgWrapper>\r\n                </div>\r\n            </div>\r\n        </StyledPanel>\r\n    )\r\n}\r\n\r\nexport const calcPotential = (char, from, to) => {\r\n    const result = {\r\n        items: {},\r\n        money: 0,\r\n        buff: {\r\n            ATK: 0,\r\n            HP: 0,\r\n            PASSIVE: 0\r\n        },\r\n    }\r\n    const type = (char === 'nr' || char[0] === '4' || char[0] === '3')\r\n        ? 3\r\n        : charData.find(c => c.id === char).potentialType\r\n\r\n    const stages = potentialData.type[type]\r\n    for (let i = from[0] - 1; i < to[0] - 1 + 1; i++) {\r\n        let stage = stages[i]\r\n        for (\r\n            let j = i === from[0] - 1 ? from[1] - 1 : 0;\r\n            j < (i === to[0] - 1 ? to[1] : 6);\r\n            j++\r\n        ) {\r\n            if (j < 0) continue\r\n\r\n            let id = stage.pattern[j] + stage.rank[j]\r\n            if (result.items[id]) {\r\n                result.items[id] += stage.num[j]\r\n            } else {\r\n                result.items[id] = stage.num[j]\r\n            }\r\n            result.money += (i + 1) * 8000\r\n            let buff = potentialData.itemMap[stage.pattern[j]].type\r\n            result.buff[buff] += stage.buff[j]\r\n        }\r\n    }\r\n    // parse result\r\n    let parsedItem = {}\r\n    for (const [key, value] of Object.entries(result.items)) {\r\n        let itemId = potentialData.itemMap[key[0]].id.map(id => (\r\n            key[1] === '9' ? '902'\r\n                : key[1] === '8' ? '901'\r\n                    : (parseInt(key[1]) * 100 + id).toString()\r\n        ))\r\n        for (let i of itemId) {\r\n            if (parsedItem[i]) {\r\n                parsedItem[i] += value\r\n            } else {\r\n                parsedItem[i] = value\r\n            }\r\n        }\r\n    }\r\n\r\n    result.items = parsedItem\r\n    return result\r\n}\r\n\r\nconst CalculatorContainer = styled.div`\r\n    display: table;\r\n    width: 100%;\r\n    > div {\r\n        display: table-cell;\r\n    }\r\n    @media screen and (max-width: 992px) {\r\n        display: block;\r\n        > div {\r\n            display: block; \r\n        }\r\n    }\r\n`\r\nconst TableGutter = styled.div`\r\n    width: 1rem;\r\n    @media screen and (max-width: 992px) {\r\n        display: hidden;\r\n    }\r\n`\r\nconst resultPanelWidthConfig = {\r\n    default: 'calc(75% - 1rem)',\r\n    992: '100%',\r\n}\r\nexport default function CharPotential() {\r\n    const { pageString } = useContext(LanguageContext)\r\n\r\n    const [state, setState] = useState({\r\n        character: '101',\r\n        currStage: 1,\r\n        currSub: 1,\r\n        targetStage: 1,\r\n        targetSub: 1,\r\n        result: {\r\n            items: undefined,\r\n            money: 0,\r\n            buff: {\r\n                ATK: 0,\r\n                HP: 0,\r\n                PASSIVE: 0\r\n            },\r\n        },\r\n        isHelpModalOpen: false,\r\n    })\r\n\r\n    const handleSelect = (attr) => (event) => {\r\n        let newState = { ...state }\r\n\r\n        const selected = event.target.value\r\n\r\n        newState[attr] = attr === 'character' ? selected : parseInt(selected)\r\n\r\n        // validate auto updated values\r\n        if (selected === 'nr') {\r\n            newState.currStage = state.currStage > 6 ? 1 : state.currStage\r\n            newState.targetStage = state.targetStage > 6 ? 1 : state.targetStage\r\n        }\r\n\r\n        // make sure target is always not smaller than current\r\n        newState.targetStage = Math.max(newState.targetStage, newState.currStage)\r\n        if (newState.targetStage === newState.currStage) {\r\n            newState.targetSub = Math.max(newState.targetSub, newState.currSub)\r\n        }\r\n\r\n        const result = calcPotential(\r\n            newState.character,\r\n            [newState.currStage, newState.currSub],\r\n            [newState.targetStage, newState.targetSub]\r\n        )\r\n\r\n        result.buff.ATK = Math.round(result.buff.ATK * 100) / 100\r\n        result.buff.HP = Math.round(result.buff.HP * 100) / 100\r\n\r\n        newState.result = result\r\n        setState(newState)\r\n    }\r\n\r\n    const maxStage = state.character === 'nr' ? 6 : 12\r\n\r\n    const handelHelpModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isHelpModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CalculatorContainer\r\n                resultPanelWidthConfig={resultPanelWidthConfig}\r\n            >\r\n                <CharSelectPanel\r\n                    handleSelect={handleSelect}\r\n                    character={state.character}\r\n                    lumpNRChars\r\n                >\r\n                    <Gutter />\r\n                    <TwoStageForm\r\n                        title={pageString.characters.potential.currentSelectTitle}\r\n                        subMinNum={1}\r\n                        minNum={1}\r\n                        maxNum={maxStage}\r\n                        selectAttrs={['currStage', 'currSub']}\r\n                        handleSelect={handleSelect}\r\n                    />\r\n                    <TwoStageForm\r\n                        title={pageString.characters.potential.targetSelectTitle}\r\n                        subMinNum={state.currStage === state.targetStage ? state.currSub : 1}\r\n                        minNum={state.currStage}\r\n                        maxNum={maxStage}\r\n                        selectAttrs={['targetStage', 'targetSub']}\r\n                        handleSelect={handleSelect}\r\n                    />\r\n                </CharSelectPanel>\r\n                <TableGutter />\r\n                <ResultPanel\r\n                    widthConfig={resultPanelWidthConfig}\r\n                    result={state.result}\r\n                    handleModalOpen={handelHelpModal(true)}\r\n                />\r\n            </CalculatorContainer>\r\n            <TextModal\r\n                title={pageString.characters.potential.helpModal.title}\r\n                open={state.isHelpModalOpen}\r\n                onClose={handelHelpModal(false)}\r\n                content={pageString.characters.potential.helpModal.content}\r\n                ariaLabelledby=\"help-modal-title\"\r\n                ariaDescribedby=\"help-modal-description\"\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useImperativeHandle, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Badge } from 'react-bootstrap';\r\nimport ScrollableContainer from './ScrollableContainer';\r\nimport { SortableTh, SortableTable } from './FilterComponents';\r\nimport { ImgCard } from './MyCard';\r\nimport { LanguageContext } from './LanguageProvider';\r\nimport stageDropData from 'gamedata/stageDrop.json';\r\n\r\nconst ItemImg = styled(ImgCard)`\r\n    > div:first-child {\r\n        width: 2.5rem;\r\n        height: 2.5rem;\r\n        margin-right: .4rem;\r\n        user-select: none;\r\n    }\r\n`\r\nconst TextWrapper = styled.div`\r\n    white-space: nowrap;\r\n    font-size: medium;\r\n    font-weight: normal;\r\n`\r\nexport const ItemCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { itemString } = useContext(LanguageContext)\r\n\r\n    return (\r\n        <ItemImg\r\n            className={className}\r\n            imgType='item'\r\n            imgId={id}\r\n            alt=''\r\n        >\r\n            <TextWrapper>\r\n                {itemString.name[id]}\r\n            </TextWrapper>\r\n        </ItemImg>\r\n    )\r\n}\r\n\r\nconst StyledTh = styled(SortableTh)`\r\n    background-color: ${props => props.theme.colors.secondary};\r\n    color: ${props => props.theme.colors.onSecondary};\r\n    white-space: nowrap;\r\n    ${props => props.$sortable ? true : 'cursor: default;'}\r\n`\r\nconst TableHead = React.forwardRef((props, ref) => {\r\n    const { pageString } = useContext(LanguageContext)\r\n\r\n    return (\r\n        <thead ref={ref}>\r\n            <tr>\r\n                {Object.entries(pageString.items.drop.index.tableHead)\r\n                    .map((entry, idx) => {\r\n                        const sortable = entry[0] === 'stage' || entry[0] === 'energy'\r\n                        let requestSort\r\n                        let getSortDirection\r\n                        if (sortable) {\r\n                            requestSort = () => props.requestSort(entry[0])\r\n                            getSortDirection = props.getSortDirection(entry[0])\r\n                        }\r\n\r\n                        return (\r\n                            <StyledTh\r\n                                onClick={requestSort}\r\n                                direction={getSortDirection}\r\n                                key={idx}\r\n                                $sortable={sortable}\r\n                            >\r\n                                {entry[1]}\r\n                            </StyledTh>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n})\r\n\r\nconst ItemWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: nowrap;\r\n    margin-right: .8rem;\r\n    div {\r\n        flex-wrap: nowrap;\r\n        font-size: 1rem;\r\n    }\r\n    img {\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n`\r\nconst ItemsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    > div:last-child {\r\n        margin: 0;\r\n    }\r\n`\r\nconst StyledBadge = styled(Badge)`\r\n    background-color: ${props => props.$rarity === 0 ? 'lightgray'\r\n        : props.$rarity === 1 ? '#90CAF9'\r\n            : props.$rarity === 2 ? '#A5D6A7' : '#FFAB91'};\r\n    color: black;\r\n    margin-left: .4rem;\r\n`\r\nconst TableBody = React.forwardRef((props, ref) => {\r\n    const { itemString } = useContext(LanguageContext)\r\n    const trRef = useRef()\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        getY: () => trRef.current.getBoundingClientRect().y,\r\n        getBottom: () => trRef.current.getBoundingClientRect().bottom,\r\n        current: trRef.current\r\n    }))\r\n\r\n    return (\r\n        <tbody>\r\n            {props.sortedResult.map((stage, idx) => {\r\n                if (idx > props.renderTo) {\r\n                    return null\r\n                }\r\n\r\n                const itemTd = (items) => (\r\n                    <td>\r\n                        <ItemsContainer>\r\n                            {items.length === 0\r\n                                ? undefined\r\n                                : items.map((item, i) => (\r\n                                    <ItemWrapper key={i}>\r\n                                        <ItemCard id={item.id} />\r\n                                        <StyledBadge pill $rarity={item.rarity}>\r\n                                            {itemString.rarity[item.rarity]}\r\n                                        </StyledBadge>\r\n                                    </ItemWrapper>\r\n                                ))}\r\n                        </ItemsContainer>\r\n                    </td>\r\n                )\r\n\r\n                return (\r\n                    <tr key={idx} ref={idx === props.renderTo ? trRef : undefined}>\r\n                        <td>\r\n                            {`${stage.chapter}-${stage.stage}`}\r\n                        </td>\r\n                        {itemTd(stage.materials)}\r\n                        {itemTd(stage.trainItems)}\r\n                        {itemTd(stage.expPotions)}\r\n                        <td>{stage.energy}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n})\r\n\r\nconst TableWrapper = styled(ScrollableContainer)`\r\n    overflow-x: auto;\r\n    height: calc(100vh - 10.4rem);\r\n    padding-right: 0;\r\n    margin-right: 0;\r\n`\r\nconst ItemShowcase = () => {\r\n    const sortFunc = (sortableItems, sortConfig) => {\r\n        const toStageKey = key => {\r\n            return (\r\n                parseInt(key.chapter) * 1000 +\r\n                parseInt(key.stage.split(' ')[0]) * 10 +\r\n                (key.stage.includes('free') ? 1 : 0) +\r\n                (key.stage.includes('-') ? parseInt(key.stage.split('-')[1]) : 0)\r\n            )\r\n        }\r\n\r\n        sortableItems.sort((a, b) => {\r\n            let aKey\r\n            let bKey\r\n            if (sortConfig.key === 'stage') {\r\n                aKey = toStageKey(a)\r\n                bKey = toStageKey(b)\r\n            } else {\r\n                aKey = a[sortConfig.key]\r\n                bKey = b[sortConfig.key]\r\n            }\r\n            if (aKey < bKey) {\r\n                return sortConfig.direction === 'asc' ? -1 : 1\r\n            }\r\n            if (aKey > bKey) {\r\n                return sortConfig.direction === 'asc' ? 1 : -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TableWrapper>\r\n            <SortableTable\r\n                data={stageDropData}\r\n                head={<TableHead />}\r\n                body={<TableBody />}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={'stage'}\r\n                border\r\n            />\r\n        </TableWrapper>\r\n    )\r\n}\r\n\r\nexport default ItemShowcase"],"sourceRoot":""}