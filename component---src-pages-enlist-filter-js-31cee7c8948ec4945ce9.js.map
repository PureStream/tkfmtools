{"version":3,"sources":["webpack://tkfmtools/./src/components/Card.js","webpack://tkfmtools/./src/components/CharCard.js","webpack://tkfmtools/./src/components/ResultTablePanel.js","webpack://tkfmtools/./src/pages/enlist/filter.js"],"names":["StyledImg","styled","ImageSupplier","ImgWrapper","ImgCard","children","className","imgType","imgId","alt","isBackground","name","ItemImg","TextWrapper","ItemCard","id","itemString","useLanguage","StyledTable","Table","CardTable","striped","$striped","StyledCard","props","theme","colors","surface","TitleText","CharCard","charString","split","slice","join","ResponsiveCharCard","$textWrapConfig","TagWrapper","IconWrapper","secondary","CharTr","type","tag","attrIcons","attribute","AttributeIcon","position","PositionIcon","race","RaceIcon","body","BodysizeIcon","oppai","OppaiIcon","rank","RankIcon","else","ElseIcon","tags","CharAccordionDetail","charData","char","available","rest","Object","entries","map","entry","ind","key","tagWarnMsg","TableWrapper","Scrollable","$maxHeight","StyledSortableTable","SortableTable","data","head","sortFunc","defaultSortKey","handleModalOpen","maxHeight","pageString","title","items","drop","filter","resultTitle","withHelp","onClickHelp","border","combinations","TagButtonGroup","value","onChange","layoutConfig","groupRange","ToggleButtonGroup","tagData","t","Array","range","keys","BtnGroupWrapper","AttributeChip","StyledChip","$lang","btnLayoutConfig","1400","1160","1000","768","580","0","1260","1080","550","355","1460","1250","1030","630","430","365","TagPanel","filterBtnValue","handleBtnGroupChange","groupBtnByClass","userLanguage","label","tagAttributes","v","StyledHeader","Header","onSurface","StyledSelect","Select","CharFilterPanel","clearBtnValue","enlistHour","handleEnlistHourChange","useState","minute","setMinute","enlist","tagSelectTitle","titleIcon","TagIcon","end","onClick","tooltipText","deleteTooltip","DeleteIcon","settingTooltip","SettingIcon","timeSelectTitle","ClockIcon","values","variant","size","inputProps","e","target","TableHead","requestSort","getSortDirection","tableHead","item","attr","direction","DistinctCharacterTooltip","withStyles","tooltip","right","fontSize","whiteSpace","Tooltip","TagTooltip","texts","distinctTagCombs","comb","i","TransitionComponent","Zoom","placement","arrow","CharCardWrapper","StarIconWrapper","$hidden","undefined","cardTextWrapConfig","TableBody","sortedData","length","StarIcon","rarity","appliedTags","StyledModal","ScrollableModal","SettingModal","open","onClose","radioValue","handleRadioChange","settingModal","ariaLabelledby","ariaDescribedby","RadioGroup","groupLabel","handleChange","labels","elements","num","remaining","next","characters","isHelpModalOpen","isSettingModalOpen","isSnackbarOpen","state","setState","btnsSettingLabels","useSwitch","window","innerWidth","layout","setLayout","useEffect","val","sort","charTagData","filteredChars","from","forEach","survivors","JSON","parse","stringify","includes","appliedTagsNum","c","isExist","existChar","j","every","splice","push","dataLayer","handelHelpModal","boolean","handleSettingModal","Head","helmet","description","path","Panels","panelsWidth","groupIdx","event","newValue","groupValues","concat","ResultTablePanel","sortableItems","sortConfig","a","b","aKey","bKey","helpModal","content","Snackbar","message","snackbarMsg"],"mappings":"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","file":"component---src-pages-enlist-filter-js-31cee7c8948ec4945ce9.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport ImageSupplier from 'components/ImageSupplier';\r\nimport Table from 'components/Table';\r\n\r\nconst StyledImg = styled(ImageSupplier)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background-repeat: no-repeat;\r\n`\r\nconst ImgWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nexport const ImgCard = ({\r\n    children,\r\n    className,\r\n    imgType,\r\n    imgId,\r\n    alt,\r\n    isBackground\r\n}) => (\r\n    isBackground\r\n        ? <StyledImg\r\n            className={className}\r\n            name={`${imgType}_${imgId}`}\r\n            isBackground\r\n            alt={alt}\r\n        >\r\n            {children}\r\n        </StyledImg>\r\n        : <ImgWrapper className={className}>\r\n            <StyledImg\r\n                name={`${imgType}_${imgId}`}\r\n                alt={alt}\r\n            />\r\n            {children}\r\n        </ImgWrapper>\r\n)\r\n\r\nconst ItemImg = styled(ImgCard)`\r\n    > div:first-child {\r\n        width: 2.5rem;\r\n        height: 2.5rem;\r\n        margin-right: .4rem;\r\n        user-select: none;\r\n    }\r\n`\r\nconst TextWrapper = styled.div`\r\n    white-space: nowrap;\r\n    font-size: medium;\r\n    font-weight: normal;\r\n`\r\nexport const ItemCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <ItemImg\r\n            className={className}\r\n            imgType='item'\r\n            imgId={id}\r\n            alt=''\r\n        >\r\n            <TextWrapper>\r\n                {itemString.name[id]}\r\n            </TextWrapper>\r\n        </ItemImg>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(Table)`\r\n    && .MuiTableCell-root  {\r\n        font-size: .9rem;\r\n        padding: .3rem;\r\n        padding-left: .75rem;\r\n    }\r\n`\r\nexport const CardTable = ({\r\n    className,\r\n    children,\r\n    striped\r\n}) => (\r\n    <StyledTable\r\n        className={className}\r\n        $striped={striped}\r\n    >\r\n        {children}\r\n    </StyledTable>\r\n)\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    TableBody as MuiTableBody,\r\n    TableRow as MuiTableRow,\r\n    TableCell as MuiTableCell\r\n} from '@material-ui/core';\r\n\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport { ImgCard, CardTable } from 'components/Card';\r\nimport {\r\n    AttributeIcon,\r\n    PositionIcon,\r\n    RaceIcon,\r\n    BodysizeIcon,\r\n    OppaiIcon,\r\n    RankIcon,\r\n    ElseIcon,\r\n} from 'components/icon';\r\n\r\nimport charData from 'data/character.json';\r\n\r\nconst StyledCard = styled(ImgCard)`\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    min-width: 10rem;\r\n    height: 3.6rem;\r\n    background-repeat: no-repeat;\r\n    background-size: 6rem 6rem;\r\n    background-position: 0 -1.6rem;\r\n`\r\nconst TextWrapper = styled.div`\r\n    margin-left: 0;\r\n    margin-right: 1rem;\r\n    transition: all 0.3s ease;\r\n    text-transform: none;\r\n    text-shadow: 0 0 1px ${props => props.theme.colors.surface},\r\n    -2px 0 1px  ${props => props.theme.colors.surface},\r\n    2px 0 1px  ${props => props.theme.colors.surface},\r\n    0 -2px 1px ${props => props.theme.colors.surface},\r\n    0 2px 1px  ${props => props.theme.colors.surface},\r\n    2px 2px 1px ${props => props.theme.colors.surface},\r\n    2px -2px 1px ${props => props.theme.colors.surface},\r\n    -2px 2px 1px ${props => props.theme.colors.surface},\r\n    -2px -2px 1px ${props => props.theme.colors.surface};\r\n`\r\nconst TitleText = styled(TextWrapper)`\r\n    font-size: small;\r\n`\r\nconst CharCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { charString } = useLanguage()\r\n\r\n    return (\r\n        <StyledCard\r\n            className={className}\r\n            imgType='char_small'\r\n            imgId={id}\r\n            alt=''\r\n            isBackground\r\n        >\r\n            <TitleText>\r\n                {charString.name[id].split(' ').slice(0, -1).join(' ')}\r\n            </TitleText>\r\n            <TextWrapper>\r\n                {charString.name[id].split(' ').slice(-1)[0]}\r\n            </TextWrapper>\r\n        </StyledCard>\r\n    )\r\n}\r\n\r\nexport const ResponsiveCharCard = styled(CharCard)`\r\n    @media screen and (min-width: ${props => (\r\n        props.$textWrapConfig\r\n    )}px) {\r\n        flex-direction: row;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        > div {\r\n            margin-left: 7rem\r\n        }\r\n        > div:last-child {\r\n            margin-left: -.6rem;\r\n        }\r\n    }\r\n`\r\n\r\nconst TagWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst IconWrapper = styled.div`\r\n    margin-bottom: .1rem;\r\n    margin-left: .25rem;\r\n    margin-right: .4rem;\r\n    > svg {\r\n        width: 1.2rem;\r\n        fill: ${props => props.theme.colors.secondary};\r\n        color:  ${props => props.theme.colors.secondary};\r\n    }\r\n`\r\nconst CharTr = ({\r\n    type,\r\n    tag\r\n}) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const attrIcons = {\r\n        attribute: AttributeIcon,\r\n        position: PositionIcon,\r\n        race: RaceIcon,\r\n        body: BodysizeIcon,\r\n        oppai: OppaiIcon,\r\n        rank: RankIcon,\r\n        else: ElseIcon\r\n    }\r\n\r\n    return (\r\n        <MuiTableRow>\r\n            <MuiTableCell>\r\n                <TagWrapper>\r\n                    <IconWrapper>\r\n                        {attrIcons[type]}\r\n                    </IconWrapper>\r\n                    {charString.tags[tag]}\r\n                </TagWrapper>\r\n            </MuiTableCell>\r\n        </MuiTableRow>\r\n    )\r\n}\r\n\r\nexport const CharAccordionDetail = ({ id }) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const { tags } = charData.find(char => char.id === id)\r\n    const { available, ...rest } = tags\r\n\r\n    if (!available) {\r\n        return (\r\n            <CardTable striped>\r\n                <MuiTableBody>\r\n                    <MuiTableRow>\r\n                        <MuiTableCell>\r\n                            {charString.tagWarnMsg}\r\n                        </MuiTableCell>\r\n                    </MuiTableRow>\r\n                </MuiTableBody>\r\n            </CardTable>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <CardTable striped>\r\n            <MuiTableBody>\r\n                {Object.entries(rest).map((entry, ind) => (\r\n                    entry[0] === 'else'\r\n                        ? entry[1].map(tag => (\r\n                            <CharTr\r\n                                key={tag}\r\n                                type='else'\r\n                                tag={tag}\r\n                            />\r\n                        ))\r\n                        : entry[1] >= 0\r\n                            ? <CharTr\r\n                                key={entry[1]}\r\n                                type={entry[0]}\r\n                                tag={entry[1]}\r\n                            />\r\n                            : null\r\n                ))}\r\n            </MuiTableBody>\r\n        </CardTable>\r\n    )\r\n}\r\n\r\nexport default CharCard","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Scrollable from 'containers/Scrollable';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Header from 'components/Header';\r\nimport SortableTable from 'components/SortableTable';\r\n\r\nconst TableWrapper = styled(Scrollable)`\r\n    max-height: ${props => props.$maxHeight};\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n`\r\nconst StyledSortableTable = styled(SortableTable)`\r\n    img {\r\n        width: 1.8rem; height: 1.8rem;\r\n    }\r\n    td {\r\n        padding-left: .75rem;\r\n    }\r\n`\r\nconst ResultTablePanel = ({\r\n    data,\r\n    head,\r\n    body,\r\n    sortFunc,\r\n    defaultSortKey,\r\n    handleModalOpen,\r\n    maxHeight,\r\n    striped,\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (<>\r\n        <Header\r\n            title={pageString.items.drop.filter.resultTitle}\r\n            withHelp\r\n            onClickHelp={handleModalOpen}\r\n            border\r\n        />\r\n        <TableWrapper $maxHeight={maxHeight}>\r\n            <StyledSortableTable\r\n                data={data}\r\n                head={head}\r\n                body={body}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={defaultSortKey}\r\n                striped={striped}\r\n            />\r\n        </TableWrapper>\r\n    </>)\r\n}\r\n\r\nexport default ResultTablePanel","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    TableHead as MuiTableHead,\r\n    TableBody as MuiTableBody,\r\n    TableRow as MuiTableRow,\r\n    TableCell as MuiTableCell,\r\n    Tooltip, Zoom\r\n} from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport useSwitch from 'hooks/useSwitch';\r\n\r\nimport Panels from 'containers/Panels';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Head from 'components/Head';\r\nimport ResultTablePanel from 'components/ResultTablePanel';\r\nimport { SortableTh } from 'components/SortableTable';\r\nimport Header from 'components/Header';\r\nimport { HeaderIconButton } from 'components/IconButton';\r\nimport { StyledChip } from 'components/Chip';\r\nimport ToggleButtonGroup, { ToggleButton } from 'components/ToggleButtonGroup';\r\nimport { Select } from 'components/Input';\r\nimport { ResponsiveCharCard } from 'components/CharCard';\r\nimport { ScrollableModal, TextModal } from 'components/Modal';\r\nimport RadioGroup, { Radio } from 'components/RadioGroup';\r\nimport Snackbar from 'components/Snackbar';\r\nimport {\r\n    DeleteIcon,\r\n    TagIcon,\r\n    ClockIcon,\r\n    AttributeIcon,\r\n    PositionIcon,\r\n    RaceIcon,\r\n    BodysizeIcon,\r\n    OppaiIcon,\r\n    RankIcon,\r\n    ElseIcon,\r\n    StarIcon,\r\n    SettingIcon\r\n} from 'components/icon';\r\n\r\nimport tagData from 'data/tag.json';\r\nimport charData from 'data/character.json';\r\n\r\nconst TagButtonGroup = ({\r\n    value,\r\n    onChange,\r\n    layoutConfig,\r\n    groupRange\r\n}) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const attrIcons = {\r\n        attribute: AttributeIcon,\r\n        position: PositionIcon,\r\n        race: RaceIcon,\r\n        body: BodysizeIcon,\r\n        oppai: OppaiIcon,\r\n        rank: RankIcon,\r\n        else: ElseIcon\r\n    }\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            value={value}\r\n            onChange={onChange}\r\n            layoutConfig={layoutConfig}\r\n        >\r\n            {tagData.slice(groupRange[0], groupRange[1]).map(t =>\r\n                [...Array(t.range[1]).keys()].slice(t.range[0]).map(id => (\r\n                    <ToggleButton\r\n                        value={id}\r\n                        key={id}\r\n                    >\r\n                        {attrIcons[t.type]}\r\n                        {charString.tags[id]}\r\n                    </ToggleButton>\r\n                ))\r\n            )}\r\n        </ToggleButtonGroup>\r\n    )\r\n}\r\n\r\nconst BtnGroupWrapper = styled.div`\r\n    position: relative;\r\n    padding: .5rem;\r\n    padding-top: .8rem;\r\n    margin: 1rem 0;\r\n    border-radius: .25rem;\r\n    border: 1px solid ${props => props.theme.colors.secondary};\r\n    background-color: ${props => props.theme.colors.surface};\r\n`\r\nconst AttributeChip = styled(StyledChip)`\r\n    && {\r\n        position: absolute;\r\n        z-index: 1;\r\n        top: -.6rem;\r\n        width: ${props => props.$lang === 'en' ? '4.5rem' : 'auto'};\r\n        background-color: brown;\r\n        color: white;\r\n    }\r\n`\r\nconst btnLayoutConfig = {\r\n    'en': {\r\n        1400: 5,\r\n        1160: 4,\r\n        1000: 3,\r\n        768: 4,\r\n        580: 3,\r\n        0: 2\r\n    },\r\n    'zh-TW': {\r\n        1260: 6,\r\n        1080: 5,\r\n        1000: 4,\r\n        768: 5,\r\n        550: 4,\r\n        355: 3,\r\n        0: 2\r\n    },\r\n    'ja': {\r\n        1460: 6,\r\n        1250: 5,\r\n        1030: 4,\r\n        1000: 3,\r\n        768: 5,\r\n        630: 4,\r\n        430: 3,\r\n        0: 2\r\n    },\r\n    'ko': {\r\n        1260: 6,\r\n        768: 5,\r\n        550: 4,\r\n        365: 3,\r\n        0: 2\r\n    }\r\n}\r\n\r\nconst TagPanel = ({\r\n    filterBtnValue,\r\n    handleBtnGroupChange,\r\n    groupBtnByClass\r\n}) => {\r\n    const { userLanguage, charString } = useLanguage()\r\n\r\n    return (\r\n        <div>\r\n            {groupBtnByClass\r\n                ? tagData.map((t, ind) => (\r\n                    <BtnGroupWrapper key={ind}>\r\n                        <AttributeChip label={charString.tagAttributes[t.type]} $lang={userLanguage} />\r\n                        <TagButtonGroup\r\n                            value={filterBtnValue.filter(v => v >= t.range[0] && v < t.range[1])}\r\n                            onChange={handleBtnGroupChange(ind)}\r\n                            layoutConfig={btnLayoutConfig[userLanguage]}\r\n                            groupRange={[ind, ind + 1]}\r\n                        />\r\n                    </BtnGroupWrapper>\r\n                ))\r\n                : <BtnGroupWrapper>\r\n                    <TagButtonGroup\r\n                        value={filterBtnValue}\r\n                        onChange={handleBtnGroupChange()}\r\n                        layoutConfig={btnLayoutConfig[userLanguage]}\r\n                        groupRange={[0, 7]}\r\n                    />\r\n                </BtnGroupWrapper>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StyledHeader = styled(Header)`\r\n    padding-bottom: .4rem;\r\n`\r\nconst IconWrapper = styled.div`\r\n    svg {\r\n        width: 1.2rem;\r\n        height: 1.2rem;\r\n        margin-right: .4rem;\r\n        margin-bottom: .2rem;\r\n        fill: ${props => props.theme.colors.onSurface};\r\n        color: ${props => props.theme.colors.onSurface};\r\n    }\r\n`\r\nconst StyledSelect = styled(Select)`\r\n    && > div > div {\r\n        padding-right: 1.4rem;\r\n    }\r\n`\r\nconst CharFilterPanel = ({\r\n    clearBtnValue,\r\n    filterBtnValue,\r\n    enlistHour,\r\n    handleBtnGroupChange,\r\n    handleEnlistHourChange,\r\n    handleModalOpen,\r\n    groupBtnByClass\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const [minute, setMinute] = useState('00')\r\n\r\n    return (<>\r\n        <Header\r\n            title={pageString.enlist.filter.tagSelectTitle}\r\n            titleIcon={TagIcon}\r\n            end={\r\n                <>\r\n                    <HeaderIconButton\r\n                        onClick={clearBtnValue}\r\n                        tooltipText={pageString.enlist.filter.deleteTooltip}\r\n                    >\r\n                        {DeleteIcon}\r\n                    </HeaderIconButton>\r\n                    <HeaderIconButton\r\n                        onClick={handleModalOpen}\r\n                        tooltipText={pageString.enlist.filter.settingTooltip}\r\n                    >\r\n                        {SettingIcon}\r\n                    </HeaderIconButton>\r\n                </>\r\n            }\r\n            border\r\n        />\r\n        <TagPanel\r\n            filterBtnValue={filterBtnValue}\r\n            handleBtnGroupChange={handleBtnGroupChange}\r\n            groupBtnByClass={groupBtnByClass}\r\n        />\r\n        <StyledHeader\r\n            title={pageString.enlist.filter.timeSelectTitle}\r\n            titleIcon={ClockIcon}\r\n            border\r\n        />\r\n        <StyledSelect\r\n            values={[...Array(10).keys()].slice(1)}\r\n            value={enlistHour}\r\n            variant='outlined'\r\n            size='small'\r\n            inputProps={{ 'aria-label': 'recruitment-hour' }}\r\n            onChange={handleEnlistHourChange}\r\n        />\r\n        {'：'}\r\n        <StyledSelect\r\n            values={['00', '10', '20', '30', '40', '50']}\r\n            value={minute}\r\n            variant='outlined'\r\n            size='small'\r\n            inputProps={{ 'aria-label': 'recruitment-minute' }}\r\n            onChange={e => setMinute(e.target.value)}\r\n        />\r\n    </>)\r\n}\r\n\r\nconst TableHead = ({ requestSort, getSortDirection }) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <MuiTableHead>\r\n            <MuiTableRow>\r\n                {pageString.enlist.filter.tableHead\r\n                    .map((item, ind) => (\r\n                        <SortableTh\r\n                            key={ind}\r\n                            onClick={() => requestSort(item.attr)}\r\n                            direction={getSortDirection(item.attr)}\r\n                        >\r\n                            {item.title}\r\n                        </SortableTh>\r\n                    ))}\r\n            </MuiTableRow>\r\n        </MuiTableHead>\r\n    )\r\n}\r\n\r\nconst DistinctCharacterTooltip = withStyles({\r\n    tooltip: {\r\n        right: \"0\",\r\n        fontSize: \"1rem\",\r\n        whiteSpace: \"pre\"\r\n    }\r\n})(Tooltip)\r\n\r\nconst TagTooltip = ({ children, char }) => {\r\n    const { charString } = useLanguage()\r\n\r\n    const texts = char.distinctTagCombs\r\n        .map(comb => comb.map(i => charString.tags[i]).join(', '))\r\n        .join('\\n')\r\n\r\n    return (\r\n        <DistinctCharacterTooltip\r\n            title={texts}\r\n            TransitionComponent={Zoom}\r\n            placement='bottom'\r\n            arrow\r\n        >\r\n            {children}\r\n        </DistinctCharacterTooltip >\r\n    )\r\n}\r\n\r\nconst CharCardWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    margin-left: -.75rem;\r\n    width: max-content;\r\n`\r\nconst StarIconWrapper = styled(IconWrapper)`\r\n    display: flex;\r\n    ${props => props.$hidden ? 'visibility: hidden;' : undefined}\r\n    align-items: center;\r\n    svg {\r\n        width: 1.2rem;\r\n        height: 1.2rem;\r\n        margin: 0;\r\n        margin-left: -.6rem;\r\n    }\r\n`\r\nconst parseRarity = (rarity) => (\r\n    rarity === 0 ? 'N'\r\n        : rarity === 1 ? 'R'\r\n            : rarity === 2 ? 'SR'\r\n                : 'SSR'\r\n)\r\n\r\nconst cardTextWrapConfig = {\r\n    'zh-TW': 1360,\r\n    'en': 1360,\r\n    'ja': 1460,\r\n    'ko': 1360,\r\n}\r\n\r\nfunction TableBody({ sortedData }) {\r\n    const { userLanguage, charString } = useLanguage()\r\n\r\n    return (\r\n        <MuiTableBody>\r\n            {sortedData.map(char => (\r\n                <MuiTableRow key={char.id}>\r\n                    <MuiTableCell>\r\n                        <TagTooltip char={char}>\r\n                            <CharCardWrapper>\r\n                                <ResponsiveCharCard\r\n                                    id={char.id}\r\n                                    $textWrapConfig={\r\n                                        cardTextWrapConfig[userLanguage]\r\n                                    }\r\n                                />\r\n                                <StarIconWrapper\r\n                                    $hidden={char.distinctTagCombs.length === 0}\r\n                                >\r\n                                    {StarIcon}\r\n                                </StarIconWrapper>\r\n                            </CharCardWrapper>\r\n                        </TagTooltip>\r\n                    </MuiTableCell>\r\n                    <MuiTableCell>{parseRarity(char.rarity)}</MuiTableCell>\r\n                    <MuiTableCell>\r\n                        {char.appliedTags\r\n                            .map(i => charString.tags[i]).join(', ')}\r\n                    </MuiTableCell>\r\n                </MuiTableRow>\r\n            ))}\r\n        </MuiTableBody>\r\n    )\r\n}\r\n\r\nconst StyledModal = styled(ScrollableModal)`\r\n    > div:nth-child(3) {\r\n        top: 25%;\r\n        width: 30%;\r\n        min-width: max-content;\r\n    }\r\n`\r\nconst SettingModal = ({\r\n    open,\r\n    onClose,\r\n    radioValue,\r\n    handleRadioChange\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <StyledModal\r\n            title={pageString.enlist.filter.settingModal.title}\r\n            open={open}\r\n            onClose={onClose}\r\n            ariaLabelledby='setting-modal-title'\r\n            ariaDescribedby='setting-modal-description'\r\n        >\r\n            <RadioGroup\r\n                label={pageString.enlist.filter.settingModal.groupLabel}\r\n                value={radioValue}\r\n                handleChange={handleRadioChange}\r\n            >\r\n                {pageString.enlist.filter.settingModal\r\n                    .labels.map(label => (\r\n                        <Radio label={label} value={label} key={label} />\r\n                    ))}\r\n            </RadioGroup>\r\n        </StyledModal>\r\n    )\r\n}\r\n\r\nfunction* combinations(elements, num) {\r\n    for (let i = 0; i < elements.length; i++) {\r\n        if (num === 1)\r\n            yield [elements[i]]\r\n        else {\r\n            const remaining = combinations(\r\n                elements.slice(i + 1, elements.length),\r\n                num - 1\r\n            )\r\n            for (let next of remaining)\r\n                yield [elements[i], ...next]\r\n        }\r\n    }\r\n}\r\n\r\nconst Filter = () => {\r\n    const [state, setState] = useState({\r\n        filterBtnValue: [],\r\n        characters: [],\r\n        enlistHour: '9',\r\n        isHelpModalOpen: false,\r\n        isSettingModalOpen: false,\r\n        isSnackbarOpen: false,\r\n    })\r\n\r\n    const { pageString, charString } = useLanguage()\r\n\r\n    const btnsSettingLabels = pageString.enlist.filter.settingModal.labels\r\n\r\n    const { layout, setLayout } = useSwitch(\r\n        'group-btns-by-class',\r\n        btnsSettingLabels,\r\n        (typeof window === 'undefined' || window.innerWidth <= 1000) ? 1 : 0\r\n    )\r\n\r\n    const groupBtnByClass = layout === btnsSettingLabels[0]\r\n\r\n    const sortFunc = (sortableItems, sortConfig) => {\r\n        sortableItems.sort((a, b) => {\r\n            let aKey\r\n            let bKey\r\n            if (sortConfig.key === 'appliedTags') {\r\n                aKey = a[sortConfig.key].join('')\r\n                bKey = b[sortConfig.key].join('')\r\n            } else if (sortConfig.key === 'name') {\r\n                aKey = charString.name[a.id]\r\n                bKey = charString.name[b.id]\r\n            } else {\r\n                aKey = a[sortConfig.key]\r\n                bKey = b[sortConfig.key]\r\n            }\r\n            if (aKey < bKey) {\r\n                return sortConfig.direction === 'asc' ? -1 : 1\r\n            }\r\n            if (aKey > bKey) {\r\n                return sortConfig.direction === 'asc' ? 1 : -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const val = state.filterBtnValue.slice()\r\n        if (val.length === 0) {\r\n            setState((state) => ({\r\n                ...state,\r\n                characters: []\r\n            }))\r\n        }\r\n\r\n        val.sort()\r\n        // filter characters by query tags\r\n        let charTagData = charData.filter(char => char.tags.available)\r\n        charTagData = charTagData.map((char => {\r\n            const { id, rarity, tags } = char\r\n            return ({ id, rarity, ...tags })\r\n        }))\r\n\r\n        let filteredChars = []\r\n        for (let i = val.length; i > 0; i--) {\r\n            // generate combinations\r\n            const tagCombs = Array.from(combinations(val, i))\r\n            // screen out ineligible characters\r\n            tagCombs.forEach(tags => {\r\n                // filter by rank and time\r\n                let survivors = JSON.parse(JSON.stringify(charTagData))\r\n                if (!tags.includes(20)) {\r\n                    survivors = survivors.filter(char => char.rarity < 3)\r\n                    if (state.enlistHour < 4 && !tags.includes(19)) {\r\n                        survivors = survivors.filter(char => char.rarity < 2)\r\n                    }\r\n                }\r\n                // filter by tags\r\n                let appliedTagsNum = 0\r\n                tagData.forEach(t => {\r\n                    if (appliedTagsNum === tags.length || survivors.length === 0) {\r\n                        return false\r\n                    }\r\n\r\n                    [...Array(t.range[1]).keys()].slice(t.range[0]).forEach(id => {\r\n                        if (tags.includes(id)) {\r\n                            appliedTagsNum++\r\n                            survivors = id < 21\r\n                                ? survivors.filter(c => c[t.type] === id)\r\n                                : survivors.filter(c => c[t.type].includes(id))\r\n                        }\r\n                    })\r\n                })\r\n                // whether any three (or fewer) tags can lead to only one characters\r\n                if (survivors.length === 1 && appliedTagsNum <= 3) {\r\n                    let isExist = false\r\n                    filteredChars.forEach(existChar => {\r\n                        if (existChar.id === survivors[0].id) {\r\n                            isExist = true\r\n                            for (\r\n                                let j = existChar.distinctTagCombs.length - 1;\r\n                                j >= 0;\r\n                                j--\r\n                            ) {\r\n                                if (\r\n                                    tags.every(t => existChar.distinctTagCombs[j].includes(t))\r\n                                ) {\r\n                                    existChar.distinctTagCombs.splice(j, 1)\r\n                                }\r\n                            }\r\n                            existChar.distinctTagCombs.push(tags)\r\n                            return false\r\n                        }\r\n                    })\r\n                    if (!isExist) {\r\n                        filteredChars.push({\r\n                            id: survivors[0].id,\r\n                            rarity: survivors[0].rarity,\r\n                            attribute: survivors[0].attribute,\r\n                            position: survivors[0].position,\r\n                            appliedTags: tags,\r\n                            distinctTagCombs: [tags]\r\n                        })\r\n                    }\r\n                } else {\r\n                    survivors.forEach(char => {\r\n                        let isExist = false\r\n                        filteredChars.forEach(existChar => {\r\n                            if (existChar.id === char.id) {\r\n                                isExist = true\r\n                                return false\r\n                            }\r\n                        })\r\n                        if (!isExist) {\r\n                            filteredChars.push({\r\n                                id: char.id,\r\n                                rarity: char.rarity,\r\n                                attribute: char.attribute,\r\n                                position: char.position,\r\n                                appliedTags: tags,\r\n                                distinctTagCombs: []\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        setState((state) => ({\r\n            ...state,\r\n            characters: filteredChars\r\n        }))\r\n\r\n        if (dataLayer && val.length === 5) {\r\n            dataLayer.push({\r\n                'event': 'five_tags_selected',\r\n                'character_tag_combination': val,\r\n            })\r\n        }\r\n    }, [state.filterBtnValue, state.enlistHour])\r\n\r\n    const handleEnlistHourChange = (event) => {\r\n        setState((state) => ({\r\n            ...state,\r\n            enlistHour: event.target.value\r\n        }))\r\n    }\r\n\r\n    const handleBtnGroupChange = (groupIdx) => (event, val) => {\r\n        let newValue\r\n        if (typeof (groupIdx) !== 'undefined') {\r\n            const groupValues = tagData.map(t =>\r\n                state.filterBtnValue.filter(v => v >= t.range[0] && v < t.range[1])\r\n            )\r\n            groupValues[groupIdx] = val\r\n            newValue = [].concat(...groupValues)\r\n        } else {\r\n            newValue = val\r\n        }\r\n\r\n        if (newValue.length > 5) {\r\n            setState((state) => ({\r\n                ...state,\r\n                isSnackbarOpen: true\r\n            }))\r\n            return\r\n        }\r\n\r\n        setState((state) => ({\r\n            ...state,\r\n            filterBtnValue: newValue\r\n        }))\r\n    }\r\n\r\n    const clearBtnValue = () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            filterBtnValue: []\r\n        }))\r\n    }\r\n\r\n    const handelHelpModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isHelpModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    const handleSettingModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isSettingModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    const handleRadioChange = (event) => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isSettingModalOpen: false,\r\n        }))\r\n\r\n        setLayout(event.target.value)\r\n    }\r\n\r\n    const handleSnackbarClose = () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isSnackbarOpen: false,\r\n        }))\r\n    }\r\n\r\n    return (<>\r\n        <Head\r\n            title={pageString.enlist.filter.helmet.title}\r\n            description={pageString.enlist.filter.helmet.description}\r\n            path='/enlist/filter/'\r\n        />\r\n        <Panels panelsWidth={['60%', '40%']}>\r\n            <CharFilterPanel\r\n                handleBtnGroupChange={handleBtnGroupChange}\r\n                clearBtnValue={clearBtnValue}\r\n                enlistHour={state.enlistHour}\r\n                handleEnlistHourChange={handleEnlistHourChange}\r\n                filterBtnValue={state.filterBtnValue}\r\n                handleModalOpen={handleSettingModal(true)}\r\n                groupBtnByClass={groupBtnByClass}\r\n            />\r\n            <ResultTablePanel\r\n                data={state.characters}\r\n                head={<TableHead />}\r\n                body={<TableBody />}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={'rarity'}\r\n                handleModalOpen={handelHelpModal(true)}\r\n                maxHeight={groupBtnByClass ? 'calc(100vh - 5rem)' : 'calc(100vh - 16rem)'}\r\n                striped\r\n            />\r\n        </Panels>\r\n        <SettingModal\r\n            open={state.isSettingModalOpen}\r\n            onClose={handleSettingModal(false)}\r\n            radioValue={layout}\r\n            handleRadioChange={handleRadioChange}\r\n        />\r\n        <TextModal\r\n            title={pageString.enlist.filter.helpModal.title}\r\n            open={state.isHelpModalOpen}\r\n            onClose={handelHelpModal(false)}\r\n            content={pageString.enlist.filter.helpModal.content}\r\n            ariaLabelledby=\"help-modal-title\"\r\n            ariaDescribedby=\"help-modal-description\"\r\n        />\r\n        <Snackbar\r\n            open={state.isSnackbarOpen}\r\n            onClose={handleSnackbarClose}\r\n            message={pageString.enlist.filter.snackbarMsg}\r\n            type='warn'\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default Filter"],"sourceRoot":""}