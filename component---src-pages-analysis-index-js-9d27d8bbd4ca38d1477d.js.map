{"version":3,"sources":["webpack://tkfmtools/./src/data/charByPosition.js","webpack://tkfmtools/./src/pages/analysis/index.js"],"names":["charsData","newData","c","i","tags","position","push","id","ind","Array","map","StyledCharContainer","styled","Grid","CharImgWrapper","Button","props","$owned","CharImg","ImageSupplier","LevelInput","Input","disabled","theme","colors","dropdownHover","StyledSelect","Select","onSurface","SelectGrid","SelectWrapper","CharContainer","index","useLanguage","pageString","charString","useLineupData","currentLineup","setCurrentLineup","actions","charState","onSelect","useCallback","newCharState","newLineup","from","calcCharStats","owned","level","useCharacterSelect","selectItems","setSelect","setCharState","useEffect","handleBtnClick","handleSelectChange","key","event","parseInt","target","value","handleSubChange","item","xs","sm","md","lg","onClick","disableRipple","disableFocusRipple","name","alt","container","spacing","label","analysis","levelTitle","onChange","variant","size","margin","disciplineTitle","values","discipline","starTitle","star","PotentialInput","charId","potentialTitle","potential","mainValue","subValue","potentialSub","onMainChange","onSubChange","DataButtonContainer","DataManageButtons","handleData","handleModalOpen","IconButton","tooltipText","saveButton","SaveIcon","loadButton","LoadIcon","DataModal","localLineups","d","Header","title","date","end","deleteButton","DeleteIcon","CharGroupsContainer","PositionImgWrapper","pushLineup","getLineup","deleteLineup","useState","isDataModalOpen","isHelpModalOpen","isSuccessSnackbarOpen","isErrorSnackbarOpen","state","setState","action","gtag","loadedData","handleDataModal","boolean","handleHelpModal","positionImg","Head","helmet","description","path","charByPositionData","group","titleIcon","withHelp","onClickHelp","border","Snackbar","open","onClose","message","successMsg","type","errorMsg","modalTitle","ariaLabelledby","ariaDescribedby","helpModal","content"],"mappings":"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","file":"component---src-pages-analysis-index-js-9d27d8bbd4ca38d1477d.js","sourcesContent":["import charsData from 'data/character.json';\r\n\r\nconst charByPosition = charsData.reduce((newData, c, i) => {\r\n    newData[c.tags.position - 5].push({ id: c.id, ind: i })\r\n    return newData\r\n}, [...Array(5)].map(i => []))\r\n\r\nexport default charByPosition","import React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button, Grid } from '@material-ui/core';\r\n\r\nimport useCharacterSelect from 'hooks/useCharacterSelect';\r\n\r\nimport { useLineupData } from 'containers/LineupDataProvider';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Head from 'components/Head';\r\nimport ImageSupplier from 'components/ImageSupplier';\r\nimport Input, { Select } from 'components/Input';\r\nimport PotentialInput from 'components/PotentialInput';\r\nimport Header from 'components/Header';\r\nimport IconButton from 'components/IconButton';\r\nimport { SaveIcon, LoadIcon, DeleteIcon } from 'components/icon';\r\nimport Snackbar from 'components/Snackbar';\r\nimport { ScrollableModal, TextModal } from 'components/Modal';\r\n\r\nimport calcCharStats from 'utils/calcCharStats';\r\nimport charByPositionData from 'data/charByPosition'\r\n\r\nconst StyledCharContainer = styled(Grid)`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-bottom: 2rem;\r\n    margin-right: 2rem;\r\n    && {\r\n        max-width: 30rem;\r\n    }\r\n`\r\nconst CharImgWrapper = styled(Button)`\r\n    ${props => props.$owned ? null : 'filter: grayscale(100%);'}\r\n    && {\r\n        transition: filter 0.1s ease;\r\n    }\r\n`\r\nconst CharImg = styled(ImageSupplier)`\r\n    width: 7rem;\r\n    height: 7rem;\r\n`\r\nconst LevelInput = styled(Input)`\r\n    && {\r\n        input {\r\n            padding: .6rem 1rem;\r\n        }\r\n        color: ${props => props.disabled ? props.theme.colors.dropdownHover\r\n        : 'inherit'};\r\n    }\r\n`\r\nconst StyledSelect = styled(Select)`\r\n    && {\r\n        width: 100%;\r\n        > div > div {\r\n            padding: .6rem 1rem;\r\n            padding-right: 2rem;\r\n            color: ${props => props.disabled ? props.theme.colors.dropdownHover\r\n        : 'inherit'};\r\n        }\r\n        svg {\r\n            fill: ${props => props.disabled ? props.theme.colors.dropdownHover\r\n        : props.theme.colors.onSurface};\r\n        }\r\n    }\r\n`\r\nconst SelectGrid = styled(Grid)`\r\n    align-content: center;\r\n`\r\nconst SelectWrapper = styled(Grid)`\r\n    height: 40%;\r\n`\r\nconst CharContainer = ({ index }) => {\r\n    const { pageString, charString } = useLanguage()\r\n\r\n    const { currentLineup, actions } = useLineupData()\r\n    const { setCurrentLineup } = actions\r\n\r\n    const charState = currentLineup[index]\r\n\r\n    const onSelect = useCallback((newCharState) => {\r\n        const newLineup = Array.from(currentLineup)\r\n\r\n        newLineup[index] = {\r\n            ...newCharState,\r\n            ...calcCharStats(newCharState),\r\n            owned: newCharState.level !== 0\r\n        }\r\n\r\n        setCurrentLineup(newLineup)\r\n    }, [currentLineup[index], setCurrentLineup])\r\n\r\n    const { selectItems, setSelect, setCharState } = useCharacterSelect(charState, onSelect)\r\n\r\n    useEffect(() => {\r\n        setCharState(charState)\r\n    }, [charState])\r\n\r\n    const handleBtnClick = useCallback(() => {\r\n        const newLineup = Array.from(currentLineup)\r\n\r\n        newLineup[index].owned = !newLineup[index].owned\r\n\r\n        setCurrentLineup(newLineup)\r\n    }, [currentLineup[index], setCurrentLineup])\r\n\r\n    const handleSelectChange = useCallback((key) => (event) => {\r\n        setSelect(key, parseInt(event.target.value))\r\n    }, [setSelect])\r\n\r\n    const handleSubChange = useCallback((index) => () => {\r\n        setSelect('potentialSub', index)\r\n    }, [setSelect])\r\n\r\n    return (\r\n        <StyledCharContainer item xs={10} sm={6} md={5} lg={4}>\r\n            <CharImgWrapper\r\n                onClick={handleBtnClick}\r\n                $owned={charState.owned}\r\n                disableRipple\r\n                disableFocusRipple\r\n            >\r\n                <CharImg\r\n                    name={`char_small_${charState.id}`}\r\n                    alt={charString.name[charState.id]}\r\n                />\r\n            </CharImgWrapper>\r\n            <SelectGrid container spacing={1}>\r\n                <SelectWrapper item xs={6}>\r\n                    <LevelInput\r\n                        label={pageString.analysis.index.levelTitle}\r\n                        value={charState.level}\r\n                        onChange={handleSelectChange('level')}\r\n                        disabled={!charState.owned}\r\n                        variant='outlined'\r\n                        size='small'\r\n                        margin='dense'\r\n                    />\r\n                </SelectWrapper>\r\n                <SelectWrapper item xs={6}>\r\n                    <StyledSelect\r\n                        label={pageString.analysis.index.disciplineTitle}\r\n                        values={selectItems.discipline.values}\r\n                        value={charState.id[0] === '4' ? '-' : charState.discipline}\r\n                        onChange={handleSelectChange('discipline')}\r\n                        disabled={!charState.owned || charState.id[0] === '4'}\r\n                        margin='dense'\r\n                    />\r\n                </SelectWrapper>\r\n                <SelectWrapper item xs={6}>\r\n                    <StyledSelect\r\n                        label={pageString.analysis.index.starTitle}\r\n                        values={selectItems.star.values}\r\n                        value={charState.star}\r\n                        onChange={handleSelectChange('star')}\r\n                        disabled={!charState.owned}\r\n                        margin='dense'\r\n                    />\r\n                </SelectWrapper>\r\n                <SelectWrapper item xs={6}>\r\n                    <PotentialInput\r\n                        charId={charState.id}\r\n                        label={pageString.analysis.index.potentialTitle}\r\n                        values={selectItems.potential.values}\r\n                        mainValue={charState.potential}\r\n                        subValue={charState.potentialSub}\r\n                        onMainChange={handleSelectChange('potential')}\r\n                        onSubChange={handleSubChange}\r\n                        disabled={!charState.owned}\r\n                        margin='dense'\r\n                    />\r\n                </SelectWrapper>\r\n            </SelectGrid>\r\n        </StyledCharContainer>\r\n    )\r\n}\r\n\r\nconst DataButtonContainer = styled.div`\r\n    position: absolute;\r\n    right: 0;\r\n    top: -4rem;\r\n    margin-bottom : 0;\r\n    > span:last-child button {\r\n        margin: 0;\r\n    }\r\n`\r\nconst DataManageButtons = ({ handleData, handleModalOpen }) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <DataButtonContainer>\r\n            <IconButton\r\n                onClick={handleData('save')}\r\n                tooltipText={pageString.analysis.index.saveButton}\r\n            >\r\n                {SaveIcon}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleModalOpen}\r\n                tooltipText={pageString.analysis.index.loadButton}\r\n            >\r\n                {LoadIcon}\r\n            </IconButton>\r\n        </DataButtonContainer>\r\n    )\r\n}\r\n\r\nconst DataModal = ({ handleData }) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const { localLineups } = useLineupData()\r\n\r\n    if (!localLineups) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        localLineups.map((d, ind) => (\r\n            <Header\r\n                title={d.date}\r\n                end={<>\r\n                    <IconButton\r\n                        onClick={handleData('load', ind)}\r\n                        tooltipText={pageString.analysis.index.loadButton}\r\n                    >\r\n                        {LoadIcon}\r\n                    </IconButton>\r\n                    <IconButton\r\n                        onClick={handleData('delete', ind)}\r\n                        tooltipText={pageString.analysis.index.deleteButton}\r\n                    >\r\n                        {DeleteIcon}\r\n                    </IconButton>\r\n                </>}\r\n                key={ind}\r\n            />\r\n        ))\r\n    )\r\n}\r\n\r\nconst CharGroupsContainer = styled.div`\r\n    width: 100%;\r\n    > div:nth-child(even) > div > span {\r\n        display: flex;\r\n        align-items: center;\r\n        margin-bottom: .4rem;\r\n    }\r\n    > div:nth-child(2) > div {\r\n        width: 100%;\r\n        justify-content: space-between;\r\n    }\r\n`\r\nconst PositionImgWrapper = styled(ImageSupplier)`\r\n    width: 2rem;\r\n    margin-right: .2rem;\r\n`\r\nconst Index = () => {\r\n    const { pageString, charString } = useLanguage()\r\n\r\n    const { currentLineup, actions } = useLineupData()\r\n    const { pushLineup, getLineup, deleteLineup, setCurrentLineup } = actions\r\n\r\n    const [state, setState] = useState({\r\n        isDataModalOpen: false,\r\n        isHelpModalOpen: false,\r\n        isSuccessSnackbarOpen: false,\r\n        isErrorSnackbarOpen: false\r\n    })\r\n\r\n    const handleData = (action, ind) => () => {\r\n        switch (action) {\r\n            case 'save':\r\n                if (pushLineup(currentLineup, { gtag: true })) {\r\n                    setState(state => ({ ...state, isSuccessSnackbarOpen: true }))\r\n\r\n                    return\r\n                }\r\n\r\n            case 'load':\r\n                const loadedData = getLineup(ind)\r\n                if (loadedData) {\r\n                    setState(state => ({\r\n                        ...state,\r\n                        isSuccessSnackbarOpen: true,\r\n                        isDataModalOpen: false\r\n                    }))\r\n\r\n                    setCurrentLineup(loadedData)\r\n\r\n                    return\r\n                }\r\n\r\n            case 'delete':\r\n                if (deleteLineup(ind)) {\r\n                    setState(state => ({\r\n                        ...state,\r\n                        isDataModalOpen: true,\r\n                    }))\r\n\r\n                    return\r\n                }\r\n\r\n            default: break\r\n        }\r\n\r\n        setState(state => ({\r\n            ...state,\r\n            isErrorSnackbarOpen: true,\r\n        }))\r\n    }\r\n\r\n    const handleSuccessSnackbarClose = () => {\r\n        setState((state) => ({ ...state, isSuccessSnackbarOpen: false }))\r\n    }\r\n\r\n    const handleErrorSnackbarClose = () => {\r\n        setState((state) => ({ ...state, isErrorSnackbarOpen: false }))\r\n    }\r\n\r\n    const handleDataModal = (boolean) => () => {\r\n        setState(state => ({ ...state, isDataModalOpen: boolean }))\r\n    }\r\n\r\n    const handleHelpModal = (boolean) => () => {\r\n        setState(state => ({ ...state, isHelpModalOpen: boolean }))\r\n    }\r\n\r\n    const positionImg = [\r\n        'attacker',\r\n        'defender',\r\n        'healer',\r\n        'obsructer',\r\n        'supporter'\r\n    ]\r\n\r\n    return (\r\n        <CharGroupsContainer>\r\n            <Head\r\n                title={pageString.analysis.index.helmet.title}\r\n                description={pageString.analysis.index.helmet.description}\r\n                path='/analysis/'\r\n            />\r\n            <DataManageButtons handleData={handleData} handleModalOpen={handleDataModal(true)} />\r\n            {charByPositionData.map((group, ind) => (\r\n                <React.Fragment key={ind}>\r\n                    <Header\r\n                        title={charString.tags[ind + 5]}\r\n                        titleIcon={\r\n                            <PositionImgWrapper\r\n                                name={`ui_${positionImg[ind]}`}\r\n                                alt=''\r\n                            />\r\n                        }\r\n                        withHelp={ind === 0}\r\n                        onClickHelp={handleHelpModal(true)}\r\n                        border\r\n                    />\r\n                    <Grid container spacing={2}>\r\n                        {group.map(c => (\r\n                            <CharContainer\r\n                                index={c.ind}\r\n                                key={c.id}\r\n                            />\r\n                        ))}\r\n                    </Grid>\r\n                </React.Fragment>\r\n            ))}\r\n            <Snackbar\r\n                open={state.isSuccessSnackbarOpen}\r\n                onClose={handleSuccessSnackbarClose}\r\n                message={pageString.analysis.index.successMsg}\r\n                type='success'\r\n            />\r\n            <Snackbar\r\n                open={state.isErrorSnackbarOpen}\r\n                onClose={handleErrorSnackbarClose}\r\n                message={pageString.analysis.index.errorMsg}\r\n                type='error'\r\n            />\r\n            <ScrollableModal\r\n                title={pageString.analysis.index.modalTitle}\r\n                open={state.isDataModalOpen}\r\n                onClose={handleDataModal(false)}\r\n                ariaLabelledby='data-operation-modal-title'\r\n                ariaDescribedby='data-operation-modal-description'\r\n            >\r\n                <DataModal\r\n                    handleData={handleData}\r\n                />\r\n            </ScrollableModal>\r\n            <TextModal\r\n                title={pageString.analysis.index.helpModal.title}\r\n                content={pageString.analysis.index.helpModal.content}\r\n                open={state.isHelpModalOpen}\r\n                onClose={handleHelpModal(false)}\r\n                ariaLabelledby='help-modal-title'\r\n                ariaDescribedby='help-modal-description'\r\n            />\r\n        </CharGroupsContainer>\r\n    )\r\n}\r\n\r\nexport default Index"],"sourceRoot":""}