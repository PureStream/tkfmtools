{"version":3,"sources":["webpack://tkfmtools/./src/components/MyCard.js","webpack://tkfmtools/./src/pages/items/drop/index.js"],"names":["StyledImg","styled","ImageSupplier","ImgWrapper","ImgCard","children","className","imgType","imgId","alt","isBackground","name","ItemImg","TextWrapper","ItemCard","id","itemString","useLanguage","StyledTable","Table","props","theme","colors","onSurface","CardTable","striped","borderless","size","StyledTh","SortableTh","secondary","onSecondary","$sortable","TableHead","column","columnHasMounted","requestSort","getSortDirection","pageString","Object","entries","items","drop","index","tableHead","map","entry","idx","sortable","onClick","undefined","direction","key","hidden","includes","ItemsContainer","ItemWrapper","StyledBadge","Badge","$rarity","ItemTd","rarity","rank","length","item","i","itemData","category","pill","TableBody","sortedResult","s","chapter","stage","energy","rest","values","filter","v","every","some","btnLayoutConfig","0","990","StyledContainer","StyledHeader","MyHeader","StyledToggleButton","MyToggleButton","ButtonGroupContainer","filterBtnValue","filterBy","groupValues","strings","userLanguage","title","border","MyToggleButtonGroup","type","value","onChange","layoutConfig","button","StyledModal","ScrollableModal","SettingModal","isModalOpen","onClose","settingModal","open","ariaLabelledby","BtnGroupsValues","content","toStageKey","parseInt","split","sortFunc","sortableItems","sortConfig","sort","a","b","aKey","bKey","stageDrop","concat","stageDropData","stages","TableWrapper","Scrollable","SettingButtonWrapper","useState","window","innerWidth","Array","keys","fill","state","setState","handleModal","boolean","Head","helmet","description","path","MyIconButton","tooltipText","settingTooltip","SettingIcon","data","head","body","defaultSortKey","val"],"mappings":"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","file":"component---src-pages-items-drop-index-js-9a030d6e10667f64d396.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport ImageSupplier from 'components/ImageSupplier';\r\n\r\nconst StyledImg = styled(ImageSupplier)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background-repeat: no-repeat;\r\n`\r\nconst ImgWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nexport const ImgCard = ({\r\n    children,\r\n    className,\r\n    imgType,\r\n    imgId,\r\n    alt,\r\n    isBackground\r\n}) => (\r\n    isBackground\r\n        ? <StyledImg\r\n            className={className}\r\n            name={`${imgType}_${imgId}`}\r\n            isBackground\r\n            alt={alt}\r\n        >\r\n            {children}\r\n        </StyledImg>\r\n        : <ImgWrapper className={className}>\r\n            <StyledImg\r\n                name={`${imgType}_${imgId}`}\r\n                alt={alt}\r\n            />\r\n            {children}\r\n        </ImgWrapper>\r\n)\r\n\r\nconst ItemImg = styled(ImgCard)`\r\n    > div:first-child {\r\n        width: 2.5rem;\r\n        height: 2.5rem;\r\n        margin-right: .4rem;\r\n        user-select: none;\r\n    }\r\n`\r\nconst TextWrapper = styled.div`\r\n    white-space: nowrap;\r\n    font-size: medium;\r\n    font-weight: normal;\r\n`\r\nexport const ItemCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <ItemImg\r\n            className={className}\r\n            imgType='item'\r\n            imgId={id}\r\n            alt=''\r\n        >\r\n            <TextWrapper>\r\n                {itemString.name[id]}\r\n            </TextWrapper>\r\n        </ItemImg>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(Table)`\r\n    font-size: .9rem;\r\n    color: ${props => props.theme.colors.onSurface};\r\n    margin: 0;\r\n    > tbody > tr > {\r\n        td:first-child {\r\n            padding-left: .75rem;\r\n        }\r\n    }\r\n`\r\nexport const CardTable = ({\r\n    className,\r\n    children,\r\n    striped\r\n}) => (\r\n    <StyledTable\r\n        className={className}\r\n        striped={striped}\r\n        borderless\r\n        size=\"sm\"\r\n    >\r\n        {children}\r\n    </StyledTable>\r\n)\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\nimport Scrollable from 'containers/Scrollable';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Head from \"components/Head\";\r\nimport MyIconButton from 'components/MyIconButton';\r\nimport { SortableTh, SortableTable } from 'components/FilterComponents';\r\nimport { ItemCard } from 'components/MyCard';\r\nimport { ScrollableModal } from 'components/MyModal';\r\nimport MyHeader from 'components/MyHeader';\r\nimport MyToggleButtonGroup, { MyToggleButton } from 'components/MyToggleButtonGroup';\r\nimport { SettingIcon } from 'components/icon';\r\n\r\nimport stageDropData from 'data/stageDrop.json';\r\nimport itemData from 'data/item.json';\r\n\r\nconst StyledTh = styled(SortableTh)`\r\n    background-color: ${props => props.theme.colors.secondary};\r\n    color: ${props => props.theme.colors.onSecondary};\r\n    white-space: nowrap;\r\n    ${props => props.$sortable ? null : 'cursor: default;'}\r\n`\r\nconst TableHead = ({\r\n    column,\r\n    columnHasMounted,\r\n    requestSort,\r\n    getSortDirection\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {Object.entries(pageString.items.drop.index.tableHead)\r\n                    .map((entry, idx) => {\r\n                        const sortable = entry[0] === 'stage' || entry[0] === 'energy'\r\n\r\n                        return (\r\n                            (idx === 0 || columnHasMounted[idx - 1]) &&\r\n                            <StyledTh\r\n                                onClick={sortable ? () => requestSort(entry[0]) : undefined}\r\n                                direction={sortable ? getSortDirection(entry[0]) : undefined}\r\n                                key={idx}\r\n                                $sortable={sortable}\r\n                                hidden={idx !== 0 && !column.includes(idx - 1)}\r\n                            >\r\n                                {entry[1]}\r\n                            </StyledTh>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst ItemsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    > div:last-child {\r\n        margin: 0;\r\n    }\r\n`\r\nconst ItemWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: nowrap;\r\n    margin-right: .8rem;\r\n    div {\r\n        flex-wrap: nowrap;\r\n        font-size: 1rem;\r\n    }\r\n    img {\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n`\r\nconst StyledBadge = styled(Badge)`\r\n    background-color: ${props => props.$rarity === 0 ? 'lightgray'\r\n        : props.$rarity === 1 ? '#90CAF9'\r\n            : props.$rarity === 2 ? '#A5D6A7' : '#FFAB91'};\r\n    color: black;\r\n    margin-left: .4rem;\r\n`\r\nconst ItemTd = ({ items, rarity, rank, hidden }) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <td hidden={hidden}>\r\n            <ItemsContainer>\r\n                {items.length !== 0 &&\r\n                    items.map((item, i) => (\r\n                        <ItemWrapper key={i} hidden={!rarity.includes(item.rarity) ||\r\n                            (itemData[item.id].category === 0 && !rank.includes(itemData[item.id].rank))}>\r\n                            <ItemCard id={item.id} />\r\n                            <StyledBadge pill $rarity={item.rarity}>\r\n                                {itemString.rarity[item.rarity]}\r\n                            </StyledBadge>\r\n                        </ItemWrapper>\r\n                    ))}\r\n            </ItemsContainer>\r\n        </td>\r\n    )\r\n}\r\n\r\nconst TableBody = ({\r\n    column,\r\n    rarity,\r\n    rank,\r\n    columnHasMounted,\r\n    sortedResult\r\n}) => (\r\n    <tbody>\r\n        {sortedResult.map((s, idx) => {\r\n            const { chapter, stage, energy, ...rest } = s\r\n\r\n            return (\r\n                <tr\r\n                    key={idx}\r\n                    hidden={Object.values(rest)\r\n                        .filter((v, i) => column.includes(i))\r\n                        .every(v =>\r\n                            !v.some(i => rarity.includes(i.rarity) &&\r\n                                (itemData[i.id].category !== 0 ||\r\n                                    rank.includes(itemData[i.id].rank)))\r\n                        )}\r\n                >\r\n                    <td>\r\n                        {`${chapter}-${stage}`}\r\n                    </td>\r\n                    {Object.values(rest).map((v, idx) => (\r\n                        columnHasMounted[idx] &&\r\n                        <ItemTd\r\n                            items={v}\r\n                            rarity={rarity}\r\n                            rank={rank}\r\n                            hidden={!column.includes(idx)}\r\n                            key={idx}\r\n                        />\r\n                    ))}\r\n                    <td hidden={!column.includes(3)}>\r\n                        {columnHasMounted[3] && energy}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })}\r\n    </tbody>\r\n)\r\n\r\nconst btnLayoutConfig = {\r\n    'en': { 0: 2, 990: 4 },\r\n    'zh-TW': { 0: 4 }\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n    padding: .2rem;\r\n`\r\nconst StyledHeader = styled(MyHeader)`\r\n    margin-top: 1rem;\r\n`\r\nconst StyledToggleButton = styled(MyToggleButton)`\r\n    &&&& {\r\n        padding: .25rem .15rem;\r\n    }\r\n`\r\nconst ButtonGroupContainer = ({\r\n    filterBtnValue,\r\n    filterBy,\r\n    groupValues,\r\n    strings\r\n}) => {\r\n    const { userLanguage } = useLanguage()\r\n\r\n    return (\r\n        <StyledContainer>\r\n            <StyledHeader\r\n                title={strings.title}\r\n                border\r\n            />\r\n            <MyToggleButtonGroup\r\n                type='checkbox'\r\n                value={filterBtnValue}\r\n                onChange={filterBy}\r\n                layoutConfig={btnLayoutConfig[userLanguage]}\r\n            >\r\n                {groupValues.map((v, idx) => (\r\n                    <StyledToggleButton value={v} key={idx}>\r\n                        {strings.button[idx]}\r\n                    </StyledToggleButton>\r\n                ))}\r\n            </MyToggleButtonGroup>\r\n        </StyledContainer>\r\n    )\r\n}\r\n\r\nconst StyledModal = styled(ScrollableModal)`\r\n    > div:nth-child(3) {\r\n        top: 20%;\r\n        width: 30%;\r\n        @media screen and (max-width: 1300px) {\r\n            width: 40%;\r\n        }\r\n        @media screen and (max-width: 992px) {\r\n            width: 60%;\r\n        }\r\n        @media screen and (max-width: 768px) {\r\n            width: 90%;\r\n        }\r\n        > div:last-child > div:first-child > div {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n`\r\nconst SettingModal = ({\r\n    isModalOpen,\r\n    onClose,\r\n    filterBy,\r\n    ...props\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <StyledModal\r\n            title={pageString.items.drop.index.settingModal.title}\r\n            open={isModalOpen}\r\n            onClose={onClose}\r\n            ariaLabelledby='setting-modal-title'\r\n        >\r\n            {Object.entries(BtnGroupsValues).map((entry, idx) => (\r\n                <ButtonGroupContainer\r\n                    groupValues={entry[1]}\r\n                    filterBtnValue={props[entry[0]]}\r\n                    filterBy={filterBy(entry[0])}\r\n                    strings={pageString.items.drop.index.settingModal.content[idx]}\r\n                    key={idx}\r\n                />\r\n            ))}\r\n        </StyledModal>\r\n    )\r\n}\r\n\r\nconst toStageKey = (key) => {\r\n    return (\r\n        parseInt(key.chapter) * 1000 +\r\n        parseInt(key.stage.split(' ')[0]) * 10 +\r\n        (key.stage.includes('free') ? 1 : 0) +\r\n        (key.stage.includes('-') ? parseInt(key.stage.split('-')[1]) : 0)\r\n    )\r\n}\r\n\r\nconst sortFunc = (sortableItems, sortConfig) => {\r\n    sortableItems.sort((a, b) => {\r\n        let aKey\r\n        let bKey\r\n        if (sortConfig.key === 'stage') {\r\n            aKey = toStageKey(a)\r\n            bKey = toStageKey(b)\r\n        } else {\r\n            aKey = a[sortConfig.key]\r\n            bKey = b[sortConfig.key]\r\n        }\r\n        if (aKey < bKey) {\r\n            return sortConfig.direction === 'asc' ? -1 : 1\r\n        }\r\n        if (aKey > bKey) {\r\n            return sortConfig.direction === 'asc' ? 1 : -1\r\n        }\r\n        return 0\r\n    })\r\n}\r\n\r\nconst BtnGroupsValues = {\r\n    column: [0, 1, 2, 3],\r\n    rank: [1, 2, 3, 4],\r\n    rarity: [0, 1, 2, 3]\r\n}\r\n\r\nconst stageDrop = [].concat(...stageDropData.map(chapter => (\r\n    chapter.stages.map(stage => ({\r\n        chapter: chapter.chapter,\r\n        ...stage\r\n    }))\r\n)))\r\n\r\nconst TableWrapper = styled(Scrollable)`\r\n    overflow-x: auto;\r\n    height: calc(100vh - 11rem);\r\n    padding-right: 0;\r\n    margin-right: 0;\r\n    table {\r\n        text-align: center;\r\n    }\r\n`\r\nconst SettingButtonWrapper = styled.div`\r\n    position absolute;\r\n    right: 0;\r\n    top: -4rem;\r\n`\r\nconst Index = () => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const [state, setState] = useState({\r\n        ...BtnGroupsValues,\r\n        column: typeof (window) !== 'undefined' && window.innerWidth < 600 ? [0] : BtnGroupsValues.column,\r\n        isModalOpen: false,\r\n        columnHasMounted: typeof (window) !== 'undefined' && window.innerWidth < 600\r\n            ? [...Array(4).keys()].map((b, i) => i === 0)\r\n            : Array(4).fill(true)\r\n    })\r\n\r\n    const filterBy = (key) => (val) => setState(state => ({\r\n        ...state,\r\n        [key]: val,\r\n        columnHasMounted: key === 'column'\r\n            ? state.columnHasMounted.map((b, i) => b || val.includes(i))\r\n            : state.columnHasMounted\r\n    }))\r\n\r\n    const handleModal = (boolean) => () => setState(state => ({\r\n        ...state,\r\n        isModalOpen: boolean\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <Head\r\n                title={pageString.items.drop.index.helmet.title}\r\n                description={pageString.items.drop.index.helmet.description}\r\n                path='/items/drop/'\r\n            />\r\n            <SettingButtonWrapper>\r\n                <MyIconButton\r\n                    onClick={handleModal(true)}\r\n                    tooltipText={pageString.items.drop.index.settingTooltip}\r\n                >\r\n                    {SettingIcon}\r\n                </MyIconButton>\r\n            </SettingButtonWrapper>\r\n            <TableWrapper>\r\n                <SortableTable\r\n                    data={stageDrop}\r\n                    head={<TableHead\r\n                        column={state.column}\r\n                        columnHasMounted={state.columnHasMounted}\r\n                    />}\r\n                    body={<TableBody\r\n                        column={state.column}\r\n                        rarity={state.rarity}\r\n                        rank={state.rank}\r\n                        columnHasMounted={state.columnHasMounted}\r\n                    />}\r\n                    sortFunc={sortFunc}\r\n                    defaultSortKey={'stage'}\r\n                    border\r\n                />\r\n            </TableWrapper>\r\n            <SettingModal\r\n                {...state}\r\n                isModalOpen={state.isModalOpen}\r\n                onClose={handleModal(false)}\r\n                filterBy={filterBy}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index"],"sourceRoot":""}