{"version":3,"sources":["webpack://tkfmtools/./src/components/ItemShowcase.js","webpack://tkfmtools/./src/components/MyCard.js","webpack://tkfmtools/./src/pages/items/drop/index.js"],"names":["ItemImg","styled","ImgCard","TextWrapper","ItemCard","className","id","itemString","useContext","LanguageContext","imgType","imgId","alt","name","StyledTh","SortableTh","props","theme","colors","secondary","onSecondary","$sortable","TableHead","React","ref","pageString","Object","entries","items","drop","index","tableHead","map","entry","idx","requestSort","getSortDirection","sortable","onClick","direction","key","ItemWrapper","ItemsContainer","StyledBadge","Badge","$rarity","TableBody","trRef","useRef","useImperativeHandle","getY","current","getBoundingClientRect","y","getBottom","bottom","sortedResult","stage","renderTo","itemTd","length","undefined","item","i","pill","rarity","chapter","materials","trainItems","expPotions","energy","TableWrapper","ScrollableContainer","data","stageDropData","head","body","sortFunc","sortableItems","sortConfig","toStageKey","parseInt","split","includes","sort","a","b","aKey","bKey","defaultSortKey","border","StyledImg","ImageSupplier","ImgWrapper","children","isBackground","StyledTable","Table","onSurface","CardTable","striped","borderless","size","title","helmet","description","path"],"mappings":"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","file":"component---src-pages-items-drop-index-js-c17248b05c129c58b2b2.js","sourcesContent":["import React, { useContext, useImperativeHandle, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Badge } from 'react-bootstrap';\r\nimport ScrollableContainer from './ScrollableContainer';\r\nimport { SortableTh, SortableTable } from './FilterComponents';\r\nimport { ImgCard } from './MyCard';\r\nimport { LanguageContext } from './LanguageProvider';\r\nimport stageDropData from 'gamedata/stageDrop.json';\r\n\r\nconst ItemImg = styled(ImgCard)`\r\n    > div:first-child {\r\n        width: 2.5rem;\r\n        height: 2.5rem;\r\n        margin-right: .4rem;\r\n        user-select: none;\r\n    }\r\n`\r\nconst TextWrapper = styled.div`\r\n    white-space: nowrap;\r\n    font-size: medium;\r\n    font-weight: normal;\r\n`\r\nexport const ItemCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { itemString } = useContext(LanguageContext)\r\n\r\n    return (\r\n        <ItemImg\r\n            className={className}\r\n            imgType='item'\r\n            imgId={id}\r\n            alt=''\r\n        >\r\n            <TextWrapper>\r\n                {itemString.name[id]}\r\n            </TextWrapper>\r\n        </ItemImg>\r\n    )\r\n}\r\n\r\nconst StyledTh = styled(SortableTh)`\r\n    background-color: ${props => props.theme.colors.secondary};\r\n    color: ${props => props.theme.colors.onSecondary};\r\n    white-space: nowrap;\r\n    ${props => props.$sortable ? true : 'cursor: default;'}\r\n`\r\nconst TableHead = React.forwardRef((props, ref) => {\r\n    const { pageString } = useContext(LanguageContext)\r\n\r\n    return (\r\n        <thead ref={ref}>\r\n            <tr>\r\n                {Object.entries(pageString.items.drop.index.tableHead)\r\n                    .map((entry, idx) => {\r\n                        const sortable = entry[0] === 'stage' || entry[0] === 'energy'\r\n                        let requestSort\r\n                        let getSortDirection\r\n                        if (sortable) {\r\n                            requestSort = () => props.requestSort(entry[0])\r\n                            getSortDirection = props.getSortDirection(entry[0])\r\n                        }\r\n\r\n                        return (\r\n                            <StyledTh\r\n                                onClick={requestSort}\r\n                                direction={getSortDirection}\r\n                                key={idx}\r\n                                $sortable={sortable}\r\n                            >\r\n                                {entry[1]}\r\n                            </StyledTh>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n})\r\n\r\nconst ItemWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: nowrap;\r\n    margin-right: .8rem;\r\n    div {\r\n        flex-wrap: nowrap;\r\n        font-size: 1rem;\r\n    }\r\n    img {\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n`\r\nconst ItemsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    > div:last-child {\r\n        margin: 0;\r\n    }\r\n`\r\nconst StyledBadge = styled(Badge)`\r\n    background-color: ${props => props.$rarity === 0 ? 'lightgray'\r\n        : props.$rarity === 1 ? '#90CAF9'\r\n            : props.$rarity === 2 ? '#A5D6A7' : '#FFAB91'};\r\n    color: black;\r\n    margin-left: .4rem;\r\n`\r\nconst TableBody = React.forwardRef((props, ref) => {\r\n    const { itemString } = useContext(LanguageContext)\r\n    const trRef = useRef()\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        getY: () => trRef.current.getBoundingClientRect().y,\r\n        getBottom: () => trRef.current.getBoundingClientRect().bottom,\r\n        current: trRef.current\r\n    }))\r\n\r\n    return (\r\n        <tbody>\r\n            {props.sortedResult.map((stage, idx) => {\r\n                if (idx > props.renderTo) {\r\n                    return null\r\n                }\r\n\r\n                const itemTd = (items) => (\r\n                    <td>\r\n                        <ItemsContainer>\r\n                            {items.length === 0\r\n                                ? undefined\r\n                                : items.map((item, i) => (\r\n                                    <ItemWrapper key={i}>\r\n                                        <ItemCard id={item.id} />\r\n                                        <StyledBadge pill $rarity={item.rarity}>\r\n                                            {itemString.rarity[item.rarity]}\r\n                                        </StyledBadge>\r\n                                    </ItemWrapper>\r\n                                ))}\r\n                        </ItemsContainer>\r\n                    </td>\r\n                )\r\n\r\n                return (\r\n                    <tr key={idx} ref={idx === props.renderTo ? trRef : undefined}>\r\n                        <td>\r\n                            {`${stage.chapter}-${stage.stage}`}\r\n                        </td>\r\n                        {itemTd(stage.materials)}\r\n                        {itemTd(stage.trainItems)}\r\n                        {itemTd(stage.expPotions)}\r\n                        <td>{stage.energy}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n})\r\n\r\nconst TableWrapper = styled(ScrollableContainer)`\r\n    overflow-x: auto;\r\n    height: calc(100vh - 10.4rem);\r\n    padding-right: 0;\r\n    margin-right: 0;\r\n`\r\nconst ItemShowcase = () => {\r\n    const sortFunc = (sortableItems, sortConfig) => {\r\n        const toStageKey = key => {\r\n            return (\r\n                parseInt(key.chapter) * 1000 +\r\n                parseInt(key.stage.split(' ')[0]) * 10 +\r\n                (key.stage.includes('free') ? 1 : 0) +\r\n                (key.stage.includes('-') ? parseInt(key.stage.split('-')[1]) : 0)\r\n            )\r\n        }\r\n\r\n        sortableItems.sort((a, b) => {\r\n            let aKey\r\n            let bKey\r\n            if (sortConfig.key === 'stage') {\r\n                aKey = toStageKey(a)\r\n                bKey = toStageKey(b)\r\n            } else {\r\n                aKey = a[sortConfig.key]\r\n                bKey = b[sortConfig.key]\r\n            }\r\n            if (aKey < bKey) {\r\n                return sortConfig.direction === 'asc' ? -1 : 1\r\n            }\r\n            if (aKey > bKey) {\r\n                return sortConfig.direction === 'asc' ? 1 : -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TableWrapper>\r\n            <SortableTable\r\n                data={stageDropData}\r\n                head={<TableHead />}\r\n                body={<TableBody />}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={'stage'}\r\n                border\r\n            />\r\n        </TableWrapper>\r\n    )\r\n}\r\n\r\nexport default ItemShowcase","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Table } from 'react-bootstrap';\r\nimport ImageSupplier from './ImageSupplier';\r\n\r\nconst StyledImg = styled(ImageSupplier)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background-repeat: no-repeat;\r\n`\r\nconst ImgWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nexport const ImgCard = ({\r\n    children,\r\n    className,\r\n    imgType,\r\n    imgId,\r\n    alt,\r\n    isBackground\r\n}) => (\r\n    isBackground\r\n        ? <StyledImg\r\n            className={className}\r\n            name={`${imgType}_${imgId}`}\r\n            isBackground\r\n            alt={alt}\r\n        >\r\n            {children}\r\n        </StyledImg>\r\n        : <ImgWrapper className={className}>\r\n            <StyledImg\r\n                name={`${imgType}_${imgId}`}\r\n                alt={alt}\r\n            />\r\n            {children}\r\n        </ImgWrapper>\r\n)\r\n\r\nconst StyledTable = styled(Table)`\r\n    font-size: .9rem;\r\n    color: ${props => props.theme.colors.onSurface};\r\n    margin: 0;\r\n    > tbody > tr > {\r\n        td:first-child {\r\n            padding-left: .75rem;\r\n        }\r\n    }\r\n`\r\nexport const CardTable = ({\r\n    className,\r\n    children,\r\n    striped\r\n}) => (\r\n    <StyledTable\r\n        className={className}\r\n        striped={striped}\r\n        borderless\r\n        size=\"sm\"\r\n    >\r\n        {children}\r\n    </StyledTable>\r\n)\r\n","import React, { useContext } from 'react';\r\nimport Head from \"components/Head\";\r\nimport ItemShowcase from 'components/ItemShowcase';\r\nimport { LanguageContext } from 'components/LanguageProvider';\r\n\r\nconst Index = () => {\r\n    const { pageString } = useContext(LanguageContext)\r\n\r\n    return (\r\n        <>\r\n            <Head\r\n                title={pageString.items.drop.index.helmet.title}\r\n                description={pageString.items.drop.index.helmet.description}\r\n                path='/items/drop/'\r\n            />\r\n            <ItemShowcase />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index"],"sourceRoot":""}