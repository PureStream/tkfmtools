{"version":3,"sources":["webpack://tkfmtools/./src/components/ResultTablePanel.js","webpack://tkfmtools/./src/data/byStageToItem.js","webpack://tkfmtools/./src/pages/items/drop/filter.js"],"names":["TableWrapper","styled","Scrollable","props","$maxHeight","StyledSortableTable","SortableTable","data","head","body","sortFunc","defaultSortKey","handleModalOpen","maxHeight","striped","pageString","useLanguage","title","items","drop","filter","resultTitle","withHelp","onClickHelp","border","itemDropData","stageDropData","chapter","stages","forEach","stage","materials","trainItems","expPotions","rest","item","newDrop","rarity","id","push","i","toString","btnLayoutConfig","1360","992","768","624","0","410","StyledToggleButton","ToggleButton","ItemImg","ImageSupplier","ItemFilterPanel","filterBtnValue","filterBy","clearBtnValue","userLanguage","itemString","Header","itemPanelTitle","end","onClick","tooltipText","deleteTooltip","DeleteIcon","ToggleButtonGroup","value","onChange","layoutConfig","Object","entries","map","entry","ind","length","key","name","alt","ImgTh","SortableTh","TableImg","ItemTh","requestSort","getSortDirection","tableHead","direction","TableHead","sortedData","TableBody","hover","energy","sortableItems","sortConfig","toStageKey","splits","split","parseInt","includes","sort","a","b","aKey","bKey","useState","isHelpModalOpen","state","setState","event","val","filteredStages","concat","drops","every","queryItem","flag","newStage","handelHelpModal","boolean","Head","helmet","description","path","Panels","panelsWidth","e","ResultTablePanel","helpModal","open","onClose","content","ariaLabelledby","ariaDescribedby"],"mappings":"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","file":"component---src-pages-items-drop-filter-js-8bfe33dfc39040f8334d.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Scrollable from 'containers/Scrollable';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Header from 'components/Header';\r\nimport SortableTable from 'components/SortableTable';\r\n\r\nconst TableWrapper = styled(Scrollable)`\r\n    max-height: ${props => props.$maxHeight};\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n`\r\nconst StyledSortableTable = styled(SortableTable)`\r\n    img {\r\n        width: 1.8rem; height: 1.8rem;\r\n    }\r\n    td {\r\n        padding-left: .75rem;\r\n    }\r\n`\r\nconst ResultTablePanel = ({\r\n    data,\r\n    head,\r\n    body,\r\n    sortFunc,\r\n    defaultSortKey,\r\n    handleModalOpen,\r\n    maxHeight,\r\n    striped,\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (<>\r\n        <Header\r\n            title={pageString.items.drop.filter.resultTitle}\r\n            withHelp\r\n            onClickHelp={handleModalOpen}\r\n            border\r\n        />\r\n        <TableWrapper $maxHeight={maxHeight}>\r\n            <StyledSortableTable\r\n                data={data}\r\n                head={head}\r\n                body={body}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={defaultSortKey}\r\n                striped={striped}\r\n            />\r\n        </TableWrapper>\r\n    </>)\r\n}\r\n\r\nexport default ResultTablePanel","import stageDropData from 'data/stageDrop.json';\r\n\r\nlet itemDropData = {}\r\n\r\n// from stages\r\nstageDropData.forEach(chapter => {\r\n    chapter.stages.forEach(stage => {\r\n        const { materials, trainItems, expPotions, ...rest } = stage\r\n\r\n        const dropItems = [materials, trainItems, expPotions]\r\n\r\n        dropItems.forEach(items => {\r\n            items.forEach(item => {\r\n                const newDrop = { chapter: chapter.chapter, rarity: item.rarity, ...rest }\r\n\r\n                if (itemDropData[item.id]) {\r\n                    itemDropData[item.id].drop.push(newDrop)\r\n                } else {\r\n                    itemDropData[item.id] = {\r\n                        drop: [newDrop]\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    })\r\n})\r\n\r\n// not available from stages\r\n//legendary items\r\n\r\nfor (let i = 1; i < 11; i++) {\r\n    itemDropData[(500 + i).toString()] = { drop: [] }\r\n}\r\n\r\n// skill items\r\nfor (let i = 1; i < 3; i++) {\r\n    itemDropData[(900 + i).toString()] = { drop: [] }\r\n}\r\n\r\nexport default itemDropData","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { \r\n    TableHead as MuiTableHead,\r\n    TableBody as MuiTableBody,\r\n    TableRow as MuiTableRow,\r\n    TableCell as MuiTableCell\r\n } from '@material-ui/core';\r\n\r\nimport Panels from 'containers/Panels';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Head from \"components/Head\";\r\nimport ResultTablePanel from 'components/ResultTablePanel';\r\nimport { SortableTh } from 'components/SortableTable';\r\nimport Header from 'components/Header';\r\nimport { HeaderIconButton } from 'components/IconButton';\r\nimport ToggleButtonGroup, { ToggleButton } from 'components/ToggleButtonGroup';\r\nimport ImageSupplier from 'components/ImageSupplier';\r\nimport { TextModal } from 'components/Modal';\r\nimport { DeleteIcon } from 'components/icon';\r\n\r\nimport itemDropData from 'data/byStageToItem';\r\nimport stageDropData from 'data/stageDrop.json';\r\n\r\nconst btnLayoutConfig = {\r\n    'en': {\r\n        1360: 4,\r\n        992: 3,\r\n        768: 4,\r\n        624: 3,\r\n        0: 2\r\n    },\r\n    'zh-TW': {\r\n        1360: 5,\r\n        992: 4,\r\n        768: 5,\r\n        624: 4,\r\n        410: 3,\r\n        0: 2,\r\n    },\r\n    'kr': {\r\n        1360: 5,\r\n        992: 4,\r\n        768: 5,\r\n        624: 4,\r\n        410: 3,\r\n        0: 2,\r\n    }\r\n}\r\n\r\nconst StyledToggleButton = styled(ToggleButton)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: .85rem;\r\n`\r\nconst ItemImg = styled(ImageSupplier)`\r\n    width: 2.26rem; \r\n    height: 2.26rem;\r\n`\r\nconst ItemFilterPanel = ({\r\n    filterBtnValue,\r\n    filterBy,\r\n    clearBtnValue\r\n}) => {\r\n    const { userLanguage, pageString, itemString } = useLanguage()\r\n\r\n    return (<>\r\n        <Header\r\n            title={pageString.items.drop.filter.itemPanelTitle}\r\n            end={\r\n                <HeaderIconButton\r\n                    onClick={clearBtnValue}\r\n                    tooltipText={pageString.items.drop.filter.deleteTooltip}\r\n                >\r\n                    {DeleteIcon}\r\n                </HeaderIconButton>\r\n            }\r\n            border\r\n        />\r\n        <ToggleButtonGroup\r\n            value={filterBtnValue}\r\n            onChange={filterBy}\r\n            layoutConfig={btnLayoutConfig[userLanguage]}\r\n        >\r\n            {Object.entries(itemDropData).map((entry, ind) => {\r\n                if (entry[1].drop.length === 0) return true\r\n\r\n                return (\r\n                    <StyledToggleButton\r\n                        value={entry[0]}\r\n                        key={ind}\r\n                    >\r\n                        <ItemImg\r\n                            name={`item_${entry[0]}`}\r\n                            alt=''\r\n                        />\r\n                        {itemString.name[entry[0]]}\r\n                    </StyledToggleButton>\r\n                )\r\n            })}\r\n        </ToggleButtonGroup>\r\n    </>)\r\n}\r\n\r\nconst ImgTh = styled(SortableTh)`\r\n    &:after {\r\n        position: absolute;\r\n        top: calc(50% - .75rem);\r\n        margin-left: 2rem;\r\n    }\r\n`\r\nconst TableImg = styled(ImageSupplier)`\r\n    width: 1.8rem;\r\n    height: 1.8rem;\r\n`\r\nconst ItemTh = ({\r\n    requestSort,\r\n    getSortDirection,\r\n    data\r\n}) => {\r\n    const { pageString, itemString } = useLanguage()\r\n\r\n    if (data.length === 0) {\r\n        return (\r\n            <SortableTh>\r\n                {pageString.items.drop.filter.tableHead[1]}\r\n            </SortableTh>\r\n        )\r\n    }\r\n\r\n    return (\r\n        Object.entries(data[0]).map((entry, ind) => {\r\n            if (entry[0] === 'stage' || entry[0] === 'energy') {\r\n                return\r\n            }\r\n\r\n            return (\r\n                <ImgTh\r\n                    key={entry[0]}\r\n                    onClick={() => requestSort(entry[0])}\r\n                    direction={getSortDirection(entry[0])}\r\n                >\r\n                    <TableImg\r\n                        name={`item_${entry[0]}`}\r\n                        alt={itemString.name[entry[0]]}\r\n                    />\r\n                </ImgTh>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nconst TableHead = ({\r\n    requestSort,\r\n    getSortDirection,\r\n    sortedData\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <MuiTableHead>\r\n            <MuiTableRow>\r\n                <SortableTh\r\n                    onClick={() => requestSort('stage')}\r\n                    direction={getSortDirection('stage')}\r\n                >\r\n                    {pageString.items.drop.filter.tableHead[0]}\r\n                </SortableTh>\r\n                <ItemTh\r\n                    requestSort={requestSort}\r\n                    getSortDirection={getSortDirection}\r\n                    data={sortedData}\r\n                />\r\n                <ImgTh\r\n                    onClick={() => requestSort('energy')}\r\n                    direction={getSortDirection('energy')}\r\n                >\r\n                    <TableImg\r\n                        name='energy'\r\n                        alt={pageString.items.drop.filter.tableHead[2]}\r\n                    />\r\n                </ImgTh>\r\n            </MuiTableRow>\r\n        </MuiTableHead>\r\n    )\r\n}\r\n\r\nconst TableBody = ({ sortedData }) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <MuiTableBody>\r\n            {sortedData.map((stage, ind) => {\r\n                return (\r\n                    <MuiTableRow hover key={stage.stage}>\r\n                        <MuiTableCell>{stage.stage}</MuiTableCell>\r\n                        {Object.entries(stage).map((entry, ind) => {\r\n                            if (\r\n                                entry[0] === 'stage' ||\r\n                                entry[0] === 'energy'\r\n                            ) {\r\n                                return\r\n                            }\r\n\r\n                            return (\r\n                                <MuiTableCell key={ind}>\r\n                                    {itemString.rarity[entry[1]]}\r\n                                </MuiTableCell>\r\n                            )\r\n                        })}\r\n                        <MuiTableCell>{stage.energy}</MuiTableCell>\r\n                    </MuiTableRow>\r\n                )\r\n            })}\r\n        </MuiTableBody>\r\n    )\r\n}\r\n\r\nconst sortFunc = (sortableItems, sortConfig) => {\r\n    const toStageKey = (stage) => {\r\n        const splits = stage.split('-')\r\n\r\n        return (\r\n            parseInt(splits[0]) * 1000 +\r\n            parseInt(splits[1].split(' ')[0]) * 10 +\r\n            (splits[1].includes('free') ? 1 : 0) +\r\n            (splits.length > 2 ? parseInt(splits[2]) : 0)\r\n        )\r\n    }\r\n\r\n    sortableItems.sort((a, b) => {\r\n        let aKey\r\n        let bKey\r\n        if (sortConfig.key === 'stage') {\r\n            aKey = toStageKey(a.stage)\r\n            bKey = toStageKey(b.stage)\r\n        } else {\r\n            aKey = a[sortConfig.key]\r\n            bKey = b[sortConfig.key]\r\n        }\r\n        if (aKey < bKey) {\r\n            return sortConfig.direction === 'asc' ? -1 : 1\r\n        }\r\n        if (aKey > bKey) {\r\n            return sortConfig.direction === 'asc' ? 1 : -1\r\n        }\r\n        return 0\r\n    })\r\n}\r\n\r\nconst Filter = () => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const [state, setState] = useState({\r\n        filterBtnValue: [],\r\n        data: [],\r\n        isHelpModalOpen: false,\r\n    })\r\n\r\n    const filterBy = (event, val) => {\r\n        if (val.length === 0) {\r\n            setState((state) => ({\r\n                ...state,\r\n                filterBtnValue: val,\r\n                data: [],\r\n            }))\r\n            return;\r\n        }\r\n\r\n        const stageDrop = [].concat(...stageDropData.map(chapter => (\r\n            chapter.stages.map(stage => {\r\n                const { materials, trainItems, expPotions, ...rest } = stage\r\n                return {\r\n                    ...rest,\r\n                    drops: materials.concat(trainItems, expPotions),\r\n                    chapter: chapter.chapter\r\n                }\r\n            })\r\n        )))\r\n\r\n        let filteredStages = stageDrop.filter(stage => (\r\n            val.every(queryItem => {\r\n                let flag = false\r\n                stage.drops.forEach(drop => {\r\n                    if (drop.id === queryItem) {\r\n                        flag = true\r\n                        return false\r\n                    }\r\n                })\r\n                return flag\r\n            })\r\n        ))\r\n\r\n        filteredStages = filteredStages.map(stage => {\r\n            const parsedStage = stage.chapter + '-' + stage.stage\r\n            const newStage = { stage: parsedStage, energy: stage.energy }\r\n            stage.drops.forEach(item => {\r\n                if (val.includes(item.id)) {\r\n                    newStage[item.id] = item.rarity\r\n                }\r\n            })\r\n            return newStage\r\n        })\r\n\r\n        setState((state) => ({\r\n            ...state,\r\n            filterBtnValue: val,\r\n            data: filteredStages,\r\n        }))\r\n    }\r\n\r\n    const handelHelpModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isHelpModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    return (<>\r\n        <Head\r\n            title={pageString.items.drop.filter.helmet.title}\r\n            description={pageString.items.drop.filter.helmet.description}\r\n            path='/items/drop/filter/'\r\n        />\r\n        <Panels panelsWidth={['62%', '38%']}>\r\n            <ItemFilterPanel\r\n                filterBtnValue={state.filterBtnValue}\r\n                filterBy={filterBy}\r\n                clearBtnValue={(e) => filterBy(e, [])}\r\n            />\r\n            <ResultTablePanel\r\n                data={state.data}\r\n                head={<TableHead />}\r\n                body={<TableBody />}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={state.filterBtnValue[0]}\r\n                handleModalOpen={handelHelpModal(true)}\r\n                maxHeight='calc(100vh - 16rem)'\r\n                striped\r\n            />\r\n        </Panels>\r\n        <TextModal\r\n            title={pageString.items.drop.filter.helpModal.title}\r\n            open={state.isHelpModalOpen}\r\n            onClose={handelHelpModal(false)}\r\n            content={pageString.items.drop.filter.helpModal.content}\r\n            ariaLabelledby=\"help-modal-title\"\r\n            ariaDescribedby=\"help-modal-description\"\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default Filter"],"sourceRoot":""}