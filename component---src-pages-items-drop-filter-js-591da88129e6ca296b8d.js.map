{"version":3,"sources":["webpack://tkfmtools/./src/containers/Panels.js","webpack://tkfmtools/./src/data/byStageToItem.js","webpack://tkfmtools/./src/pages/items/drop/filter.js"],"names":["Container","styled","props","$maxWidth","$horizontal","OutlinedPanel","$width","theme","colors","border","surface","shadow","children","maxWidth","panelsWidth","horizontal","layout","useLayoutConfig","pageString","useLanguage","useState","isLandscape","setOrentation","useEffect","index","setting","labels","map","child","i","key","itemDropData","stageDropData","chapter","stages","forEach","stage","materials","trainItems","expPotions","rest","items","item","newDrop","rarity","id","drop","push","toString","btnLayoutConfig","1360","992","768","624","0","410","StyledToggleButton","MyToggleButton","ItemImg","ImageSupplier","ItemFilterPanel","filterBtnValue","filterBy","clearBtnValue","userLanguage","itemString","MyHeader","title","filter","itemPanelTitle","end","onClick","tooltipText","deleteTooltip","DeleteIcon","MyToggleButtonGroup","type","value","onChange","layoutConfig","Object","entries","entry","idx","length","name","alt","ImgTh","SortableTh","TableImg","ItemTh","requestSort","getSortDirection","sortedResult","tableHead","direction","TableHead","TableBody","energy","sortFunc","sortableItems","sortConfig","toStageKey","splits","split","parseInt","includes","sort","a","b","aKey","bKey","data","isHelpModalOpen","state","setState","val","filteredStages","concat","drops","every","queryItem","flag","newStage","handelHelpModal","boolean","Head","helmet","description","path","Panels","head","body","defaultSortKey","handleModalOpen","height","striped","helpModal","open","onClose","content","ariaLabelledby","ariaDescribedby"],"mappings":"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","file":"component---src-pages-items-drop-filter-js-591da88129e6ca296b8d.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useLayoutConfig } from 'containers/Layout';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nconst Container = styled.div`\r\n    display: table;\r\n    width: calc(100% + 2rem);\r\n    max-width: ${props => props.$maxWidth};\r\n    margin: -1rem;\r\n    margin-bottom: 0;\r\n    border-spacing: 1rem;\r\n    @media screen and (max-width: 1000px)\r\n        ${props => props.$horizontal ? '' : ',(min-width: 0px)'} {\r\n        display: block;\r\n        width: 100%;\r\n        max-width: 1000px;\r\n        margin: auto;\r\n        > div {\r\n            display: block;\r\n            width: 100%;\r\n            margin: 1rem 0;\r\n            > div {\r\n                height: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\nconst OutlinedPanel = styled.div`\r\n    display: table-cell;\r\n    width: ${props => props.$width};\r\n    padding: 1rem;\r\n    border-radius: .25rem;\r\n    border: 1px solid ${props => props.theme.colors.border};\r\n    background-color: ${props => props.theme.colors.surface};\r\n    box-shadow: 0 0 .15em ${props => props.theme.colors.shadow};\r\n`\r\nconst HorizontalPanels = ({ children, maxWidth, panelsWidth, horizontal }) => {\r\n    const { layout } = useLayoutConfig()\r\n    const { pageString } = useLanguage()\r\n\r\n    const [isLandscape, setOrentation] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setOrentation(layout === pageString.index.setting.labels[1])\r\n    }, [layout])\r\n\r\n    return (\r\n        <Container\r\n            $maxWidth={maxWidth}\r\n            $horizontal={horizontal || isLandscape}\r\n        >\r\n            {children.map((child, i) => (\r\n                <OutlinedPanel key={i} $width={panelsWidth[i]}>{child}</OutlinedPanel>\r\n            ))}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HorizontalPanels","import stageDropData from 'data/stageDrop.json';\r\n\r\nlet itemDropData = {}\r\n\r\n// from stages\r\nstageDropData.forEach(chapter => {\r\n    chapter.stages.forEach(stage => {\r\n        const { materials, trainItems, expPotions, ...rest } = stage\r\n\r\n        const dropItems = [materials, trainItems, expPotions]\r\n\r\n        dropItems.forEach(items => {\r\n            items.forEach(item => {\r\n                const newDrop = { chapter: chapter.chapter, rarity: item.rarity, ...rest }\r\n\r\n                if (itemDropData[item.id]) {\r\n                    itemDropData[item.id].drop.push(newDrop)\r\n                } else {\r\n                    itemDropData[item.id] = {\r\n                        drop: [newDrop]\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    })\r\n})\r\n\r\n// not available from stages\r\n//legendary items\r\n\r\nfor (let i = 1; i < 11; i++) {\r\n    itemDropData[(500 + i).toString()] = { drop: [] }\r\n}\r\n\r\n// skill items\r\nfor (let i = 1; i < 3; i++) {\r\n    itemDropData[(900 + i).toString()] = { drop: [] }\r\n}\r\n\r\nexport default itemDropData","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Panels from 'containers/Panels';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Head from \"components/Head\";\r\nimport { ResultPanel, SortableTh } from 'components/FilterComponents';\r\nimport MyHeader from 'components/MyHeader';\r\nimport { HeaderIconButton } from 'components/MyIconButton';\r\nimport MyToggleButtonGroup, { MyToggleButton } from 'components/MyToggleButtonGroup';\r\nimport ImageSupplier from 'components/ImageSupplier';\r\nimport { TextModal } from 'components/MyModal';\r\nimport { DeleteIcon } from 'components/icon';\r\n\r\nimport itemDropData from 'data/byStageToItem';\r\nimport stageDropData from 'data/stageDrop.json';\r\n\r\nconst btnLayoutConfig = {\r\n    'en': {\r\n        1360: 4,\r\n        992: 3,\r\n        768: 4,\r\n        624: 3,\r\n        0: 2\r\n    },\r\n    'zh-TW': {\r\n        1360: 5,\r\n        992: 4,\r\n        768: 5,\r\n        624: 4,\r\n        410: 3,\r\n        0: 2,\r\n    }\r\n}\r\n\r\nconst StyledToggleButton = styled(MyToggleButton)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: .85rem;\r\n`\r\nconst ItemImg = styled(ImageSupplier)`\r\n    width: 2.26rem; \r\n    height: 2.26rem;\r\n`\r\nconst ItemFilterPanel = ({\r\n    filterBtnValue,\r\n    filterBy,\r\n    clearBtnValue\r\n}) => {\r\n    const { userLanguage, pageString, itemString } = useLanguage()\r\n\r\n    return (<>\r\n        <MyHeader\r\n            title={pageString.items.drop.filter.itemPanelTitle}\r\n            end={\r\n                <HeaderIconButton\r\n                    onClick={clearBtnValue}\r\n                    tooltipText={pageString.items.drop.filter.deleteTooltip}\r\n                >\r\n                    {DeleteIcon}\r\n                </HeaderIconButton>\r\n            }\r\n            border\r\n        />\r\n        <MyToggleButtonGroup\r\n            type='checkbox'\r\n            value={filterBtnValue}\r\n            onChange={filterBy}\r\n            layoutConfig={btnLayoutConfig[userLanguage]}\r\n        >\r\n            {Object.entries(itemDropData).map((entry, idx) => {\r\n                if (entry[1].drop.length === 0) return true\r\n\r\n                return (\r\n                    <StyledToggleButton\r\n                        value={entry[0]}\r\n                        key={idx}\r\n                    >\r\n                        <ItemImg\r\n                            name={`item_${entry[0]}`}\r\n                            alt=''\r\n                        />\r\n                        {itemString.name[entry[0]]}\r\n                    </StyledToggleButton>\r\n                )\r\n            })}\r\n        </MyToggleButtonGroup>\r\n    </>)\r\n}\r\n\r\nconst ImgTh = styled(SortableTh)`\r\n    &:after {\r\n        position: absolute;\r\n        top: calc(50% - .75rem);\r\n        margin-left: 2rem;\r\n    }\r\n`\r\nconst TableImg = styled(ImageSupplier)`\r\n    width: 1.8rem;\r\n    height: 1.8rem;\r\n`\r\nconst ItemTh = ({\r\n    requestSort,\r\n    getSortDirection,\r\n    sortedResult\r\n}) => {\r\n    const { pageString, itemString } = useLanguage()\r\n\r\n    if (sortedResult.length === 0) {\r\n        return (\r\n            <SortableTh>\r\n                {pageString.items.drop.filter.tableHead[1]}\r\n            </SortableTh>\r\n        )\r\n    }\r\n\r\n    return (\r\n        Object.entries(sortedResult[0]).map((entry, idx) => {\r\n            if (entry[0] === 'stage' || entry[0] === 'energy') {\r\n                return\r\n            }\r\n\r\n            return (\r\n                <ImgTh\r\n                    key={idx}\r\n                    onClick={() => requestSort(entry[0])}\r\n                    direction={getSortDirection(entry[0])}\r\n                >\r\n                    <TableImg\r\n                        name={`item_${entry[0]}`}\r\n                        alt={itemString.name[entry[0]]}\r\n                    />\r\n                </ImgTh>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nconst TableHead = ({\r\n    requestSort,\r\n    getSortDirection,\r\n    sortedResult\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <SortableTh\r\n                    onClick={() => requestSort('stage')}\r\n                    direction={getSortDirection('stage')}\r\n                >\r\n                    {pageString.items.drop.filter.tableHead[0]}\r\n                </SortableTh>\r\n                <ItemTh\r\n                    requestSort={requestSort}\r\n                    getSortDirection={getSortDirection}\r\n                    sortedResult={sortedResult}\r\n                />\r\n                <ImgTh\r\n                    onClick={() => requestSort('energy')}\r\n                    direction={getSortDirection('energy')}\r\n                >\r\n                    <TableImg\r\n                        name='energy'\r\n                        alt={pageString.items.drop.filter.tableHead[2]}\r\n                    />\r\n                </ImgTh>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst TableBody = ({ sortedResult }) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <tbody>\r\n            {sortedResult.map((stage, idx) => {\r\n                return (\r\n                    <tr key={idx}>\r\n                        <td>{stage.stage}</td>\r\n                        {Object.entries(stage).map((entry, idx) => {\r\n                            if (\r\n                                entry[0] === 'stage' ||\r\n                                entry[0] === 'energy'\r\n                            ) {\r\n                                return\r\n                            }\r\n\r\n                            return (\r\n                                <td key={idx}>\r\n                                    {itemString.rarity[entry[1]]}\r\n                                </td>\r\n                            )\r\n                        })}\r\n                        <td>{stage.energy}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nconst sortFunc = (sortableItems, sortConfig) => {\r\n    const toStageKey = (stage) => {\r\n        const splits = stage.split('-')\r\n\r\n        return (\r\n            parseInt(splits[0]) * 1000 +\r\n            parseInt(splits[1].split(' ')[0]) * 10 +\r\n            (splits[1].includes('free') ? 1 : 0) +\r\n            (splits.length > 2 ? parseInt(splits[2]) : 0)\r\n        )\r\n    }\r\n\r\n    sortableItems.sort((a, b) => {\r\n        let aKey\r\n        let bKey\r\n        if (sortConfig.key === 'stage') {\r\n            aKey = toStageKey(a.stage)\r\n            bKey = toStageKey(b.stage)\r\n        } else {\r\n            aKey = a[sortConfig.key]\r\n            bKey = b[sortConfig.key]\r\n        }\r\n        if (aKey < bKey) {\r\n            return sortConfig.direction === 'asc' ? -1 : 1\r\n        }\r\n        if (aKey > bKey) {\r\n            return sortConfig.direction === 'asc' ? 1 : -1\r\n        }\r\n        return 0\r\n    })\r\n}\r\n\r\nconst Filter = () => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const [state, setState] = useState({\r\n        filterBtnValue: [],\r\n        data: [],\r\n        isHelpModalOpen: false,\r\n    })\r\n\r\n    const filterBy = (val) => {\r\n        if (val.length === 0) {\r\n            setState((state) => ({\r\n                ...state,\r\n                filterBtnValue: val,\r\n                data: [],\r\n            }))\r\n            return;\r\n        }\r\n\r\n        const stageDrop = [].concat(...stageDropData.map(chapter => (\r\n            chapter.stages.map(stage => {\r\n                const { materials, trainItems, expPotions, ...rest } = stage\r\n                return {\r\n                    ...rest,\r\n                    drops: materials.concat(trainItems, expPotions),\r\n                    chapter: chapter.chapter\r\n                }\r\n            })\r\n        )))\r\n\r\n        let filteredStages = stageDrop.filter(stage => (\r\n            val.every(queryItem => {\r\n                let flag = false\r\n                stage.drops.forEach(drop => {\r\n                    if (drop.id === queryItem) {\r\n                        flag = true\r\n                        return false\r\n                    }\r\n                })\r\n                return flag\r\n            })\r\n        ))\r\n\r\n        filteredStages = filteredStages.map(stage => {\r\n            const parsedStage = stage.chapter + '-' + stage.stage\r\n            const newStage = { stage: parsedStage, energy: stage.energy }\r\n            stage.drops.forEach(item => {\r\n                if (val.includes(item.id)) {\r\n                    newStage[item.id] = item.rarity\r\n                }\r\n            })\r\n            return newStage\r\n        })\r\n\r\n        setState((state) => ({\r\n            ...state,\r\n            filterBtnValue: val,\r\n            data: filteredStages,\r\n        }))\r\n    }\r\n\r\n    const handelHelpModal = (boolean) => () => {\r\n        setState((state) => ({\r\n            ...state,\r\n            isHelpModalOpen: boolean,\r\n        }))\r\n    }\r\n\r\n    return (<>\r\n        <Head\r\n            title={pageString.items.drop.filter.helmet.title}\r\n            description={pageString.items.drop.filter.helmet.description}\r\n            path='/items/drop/filter/'\r\n        />\r\n        <Panels panelsWidth={['62%', '38%']}>\r\n            <ItemFilterPanel\r\n                filterBtnValue={state.filterBtnValue}\r\n                filterBy={filterBy}\r\n                clearBtnValue={() => filterBy([])}\r\n            />\r\n            <ResultPanel\r\n                data={state.data}\r\n                head={<TableHead />}\r\n                body={<TableBody />}\r\n                sortFunc={sortFunc}\r\n                defaultSortKey={state.filterBtnValue[0]}\r\n                handleModalOpen={handelHelpModal(true)}\r\n                height='calc(100vh - 16rem)'\r\n                striped\r\n            />\r\n        </Panels>\r\n        <TextModal\r\n            title={pageString.items.drop.filter.helpModal.title}\r\n            open={state.isHelpModalOpen}\r\n            onClose={handelHelpModal(false)}\r\n            content={pageString.items.drop.filter.helpModal.content}\r\n            ariaLabelledby=\"help-modal-title\"\r\n            ariaDescribedby=\"help-modal-description\"\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default Filter"],"sourceRoot":""}