{"version":3,"sources":["webpack://tkfmtools/./node_modules/react-bootstrap/esm/Badge.js","webpack://tkfmtools/./src/components/Card.js","webpack://tkfmtools/./src/pages/items/drop/index.js"],"names":["Badge","_ref","ref","bsPrefix","variant","pill","className","_ref$as","as","Component","props","prefix","displayName","defaultProps","StyledImg","styled","ImageSupplier","ImgWrapper","ImgCard","children","imgType","imgId","alt","isBackground","name","ItemImg","TextWrapper","ItemCard","id","itemString","useLanguage","StyledTable","Table","theme","colors","onSurface","CardTable","striped","borderless","size","StyledTh","SortableTh","secondary","onSecondary","$sortable","TableHead","column","columnHasMounted","requestSort","getSortDirection","pageString","Object","entries","items","drop","index","tableHead","map","entry","idx","sortable","onClick","undefined","direction","key","hidden","includes","ItemsContainer","ItemWrapper","StyledBadge","$rarity","ItemTd","rarity","rank","length","item","i","itemData","category","TableBody","sortedResult","s","chapter","stage","energy","rest","values","filter","v","every","some","btnLayoutConfig","0","990","StyledContainer","StyledHeader","Header","StyledToggleButton","ToggleButton","ButtonGroupContainer","filterBtnValue","filterBy","groupValues","strings","userLanguage","title","border","ToggleButtonGroup","type","value","onChange","layoutConfig","button","StyledModal","ScrollableModal","SettingModal","isModalOpen","onClose","settingModal","open","ariaLabelledby","BtnGroupsValues","content","toStageKey","parseInt","split","sortFunc","sortableItems","sortConfig","sort","a","b","aKey","bKey","stageDrop","concat","stageDropData","stages","TableWrapper","Scrollable","SettingButtonWrapper","useState","window","innerWidth","Array","keys","fill","state","setState","handleModal","boolean","Head","helmet","description","path","IconButton","tooltipText","settingTooltip","SettingIcon","SortableTable","data","head","body","defaultSortKey","val"],"mappings":"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","file":"component---src-pages-items-drop-index-js-10de645d3174c1c0d015.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport ImageSupplier from 'components/ImageSupplier';\r\n\r\nconst StyledImg = styled(ImageSupplier)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background-repeat: no-repeat;\r\n`\r\nconst ImgWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nexport const ImgCard = ({\r\n    children,\r\n    className,\r\n    imgType,\r\n    imgId,\r\n    alt,\r\n    isBackground\r\n}) => (\r\n    isBackground\r\n        ? <StyledImg\r\n            className={className}\r\n            name={`${imgType}_${imgId}`}\r\n            isBackground\r\n            alt={alt}\r\n        >\r\n            {children}\r\n        </StyledImg>\r\n        : <ImgWrapper className={className}>\r\n            <StyledImg\r\n                name={`${imgType}_${imgId}`}\r\n                alt={alt}\r\n            />\r\n            {children}\r\n        </ImgWrapper>\r\n)\r\n\r\nconst ItemImg = styled(ImgCard)`\r\n    > div:first-child {\r\n        width: 2.5rem;\r\n        height: 2.5rem;\r\n        margin-right: .4rem;\r\n        user-select: none;\r\n    }\r\n`\r\nconst TextWrapper = styled.div`\r\n    white-space: nowrap;\r\n    font-size: medium;\r\n    font-weight: normal;\r\n`\r\nexport const ItemCard = ({\r\n    className,\r\n    id\r\n}) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <ItemImg\r\n            className={className}\r\n            imgType='item'\r\n            imgId={id}\r\n            alt=''\r\n        >\r\n            <TextWrapper>\r\n                {itemString.name[id]}\r\n            </TextWrapper>\r\n        </ItemImg>\r\n    )\r\n}\r\n\r\nconst StyledTable = styled(Table)`\r\n    font-size: .9rem;\r\n    color: ${props => props.theme.colors.onSurface};\r\n    margin: 0;\r\n    > tbody > tr > {\r\n        td:first-child {\r\n            padding-left: .75rem;\r\n        }\r\n    }\r\n`\r\nexport const CardTable = ({\r\n    className,\r\n    children,\r\n    striped\r\n}) => (\r\n    <StyledTable\r\n        className={className}\r\n        striped={striped}\r\n        borderless\r\n        size=\"sm\"\r\n    >\r\n        {children}\r\n    </StyledTable>\r\n)\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\nimport Scrollable from 'containers/Scrollable';\r\nimport { useLanguage } from 'containers/LanguageProvider';\r\n\r\nimport Head from \"components/Head\";\r\nimport IconButton from 'components/IconButton';\r\nimport SortableTable, { SortableTh } from 'components/SortableTable';\r\nimport { ItemCard } from 'components/Card';\r\nimport { ScrollableModal } from 'components/Modal';\r\nimport Header from 'components/Header';\r\nimport ToggleButtonGroup, { ToggleButton } from 'components/ToggleButtonGroup';\r\nimport { SettingIcon } from 'components/icon';\r\n\r\nimport stageDropData from 'data/stageDrop.json';\r\nimport itemData from 'data/item.json';\r\n\r\nconst StyledTh = styled(SortableTh)`\r\n    background-color: ${props => props.theme.colors.secondary};\r\n    color: ${props => props.theme.colors.onSecondary};\r\n    white-space: nowrap;\r\n    ${props => props.$sortable ? null : 'cursor: default;'}\r\n`\r\nconst TableHead = ({\r\n    column,\r\n    columnHasMounted,\r\n    requestSort,\r\n    getSortDirection\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {Object.entries(pageString.items.drop.index.tableHead)\r\n                    .map((entry, idx) => {\r\n                        const sortable = entry[0] === 'stage' || entry[0] === 'energy'\r\n\r\n                        return (\r\n                            (idx === 0 || columnHasMounted[idx - 1]) &&\r\n                            <StyledTh\r\n                                onClick={sortable ? () => requestSort(entry[0]) : undefined}\r\n                                direction={sortable ? getSortDirection(entry[0]) : undefined}\r\n                                key={idx}\r\n                                $sortable={sortable}\r\n                                hidden={idx !== 0 && !column.includes(idx - 1)}\r\n                            >\r\n                                {entry[1]}\r\n                            </StyledTh>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nconst ItemsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    > div:last-child {\r\n        margin: 0;\r\n    }\r\n`\r\nconst ItemWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-wrap: nowrap;\r\n    margin-right: .8rem;\r\n    div {\r\n        flex-wrap: nowrap;\r\n        font-size: 1rem;\r\n    }\r\n    img {\r\n        width: 2rem;\r\n        height: 2rem;\r\n    }\r\n`\r\nconst StyledBadge = styled(Badge)`\r\n    background-color: ${props => props.$rarity === 0 ? 'lightgray'\r\n        : props.$rarity === 1 ? '#90CAF9'\r\n            : props.$rarity === 2 ? '#A5D6A7' : '#FFAB91'};\r\n    color: black;\r\n    margin-left: .4rem;\r\n`\r\nconst ItemTd = ({ items, rarity, rank, hidden }) => {\r\n    const { itemString } = useLanguage()\r\n\r\n    return (\r\n        <td hidden={hidden}>\r\n            <ItemsContainer>\r\n                {items.length !== 0 &&\r\n                    items.map((item, i) => (\r\n                        <ItemWrapper key={i} hidden={!rarity.includes(item.rarity) ||\r\n                            (itemData[item.id].category === 0 && !rank.includes(itemData[item.id].rank))}>\r\n                            <ItemCard id={item.id} />\r\n                            <StyledBadge pill $rarity={item.rarity}>\r\n                                {itemString.rarity[item.rarity]}\r\n                            </StyledBadge>\r\n                        </ItemWrapper>\r\n                    ))}\r\n            </ItemsContainer>\r\n        </td>\r\n    )\r\n}\r\n\r\nconst TableBody = ({\r\n    column,\r\n    rarity,\r\n    rank,\r\n    columnHasMounted,\r\n    sortedResult\r\n}) => (\r\n    <tbody>\r\n        {sortedResult.map((s, idx) => {\r\n            const { chapter, stage, energy, ...rest } = s\r\n\r\n            return (\r\n                <tr\r\n                    key={idx}\r\n                    hidden={Object.values(rest)\r\n                        .filter((v, i) => column.includes(i))\r\n                        .every(v =>\r\n                            !v.some(i => rarity.includes(i.rarity) &&\r\n                                (itemData[i.id].category !== 0 ||\r\n                                    rank.includes(itemData[i.id].rank)))\r\n                        )}\r\n                >\r\n                    <td>\r\n                        {`${chapter}-${stage}`}\r\n                    </td>\r\n                    {Object.values(rest).map((v, idx) => (\r\n                        columnHasMounted[idx] &&\r\n                        <ItemTd\r\n                            items={v}\r\n                            rarity={rarity}\r\n                            rank={rank}\r\n                            hidden={!column.includes(idx)}\r\n                            key={idx}\r\n                        />\r\n                    ))}\r\n                    <td hidden={!column.includes(3)}>\r\n                        {columnHasMounted[3] && energy}\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })}\r\n    </tbody>\r\n)\r\n\r\nconst btnLayoutConfig = {\r\n    'en': { 0: 2, 990: 4 },\r\n    'zh-TW': { 0: 4 }\r\n}\r\n\r\nconst StyledContainer = styled.div`\r\n    padding: .2rem;\r\n`\r\nconst StyledHeader = styled(Header)`\r\n    margin-top: 1rem;\r\n`\r\nconst StyledToggleButton = styled(ToggleButton)`\r\n    &&&& {\r\n        padding: .25rem .15rem;\r\n    }\r\n`\r\nconst ButtonGroupContainer = ({\r\n    filterBtnValue,\r\n    filterBy,\r\n    groupValues,\r\n    strings\r\n}) => {\r\n    const { userLanguage } = useLanguage()\r\n\r\n    return (\r\n        <StyledContainer>\r\n            <StyledHeader\r\n                title={strings.title}\r\n                border\r\n            />\r\n            <ToggleButtonGroup\r\n                type='checkbox'\r\n                value={filterBtnValue}\r\n                onChange={filterBy}\r\n                layoutConfig={btnLayoutConfig[userLanguage]}\r\n            >\r\n                {groupValues.map((v, idx) => (\r\n                    <StyledToggleButton value={v} key={idx}>\r\n                        {strings.button[idx]}\r\n                    </StyledToggleButton>\r\n                ))}\r\n            </ToggleButtonGroup>\r\n        </StyledContainer>\r\n    )\r\n}\r\n\r\nconst StyledModal = styled(ScrollableModal)`\r\n    > div:nth-child(3) {\r\n        top: 20%;\r\n        width: 30%;\r\n        @media screen and (max-width: 1300px) {\r\n            width: 40%;\r\n        }\r\n        @media screen and (max-width: 992px) {\r\n            width: 60%;\r\n        }\r\n        @media screen and (max-width: 768px) {\r\n            width: 90%;\r\n        }\r\n        > div:last-child > div:first-child > div {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n`\r\nconst SettingModal = ({\r\n    isModalOpen,\r\n    onClose,\r\n    filterBy,\r\n    ...props\r\n}) => {\r\n    const { pageString } = useLanguage()\r\n\r\n    return (\r\n        <StyledModal\r\n            title={pageString.items.drop.index.settingModal.title}\r\n            open={isModalOpen}\r\n            onClose={onClose}\r\n            ariaLabelledby='setting-modal-title'\r\n        >\r\n            {Object.entries(BtnGroupsValues).map((entry, idx) => (\r\n                <ButtonGroupContainer\r\n                    groupValues={entry[1]}\r\n                    filterBtnValue={props[entry[0]]}\r\n                    filterBy={filterBy(entry[0])}\r\n                    strings={pageString.items.drop.index.settingModal.content[idx]}\r\n                    key={idx}\r\n                />\r\n            ))}\r\n        </StyledModal>\r\n    )\r\n}\r\n\r\nconst toStageKey = (key) => {\r\n    return (\r\n        parseInt(key.chapter) * 1000 +\r\n        parseInt(key.stage.split(' ')[0]) * 10 +\r\n        (key.stage.includes('free') ? 1 : 0) +\r\n        (key.stage.includes('-') ? parseInt(key.stage.split('-')[1]) : 0)\r\n    )\r\n}\r\n\r\nconst sortFunc = (sortableItems, sortConfig) => {\r\n    sortableItems.sort((a, b) => {\r\n        let aKey\r\n        let bKey\r\n        if (sortConfig.key === 'stage') {\r\n            aKey = toStageKey(a)\r\n            bKey = toStageKey(b)\r\n        } else {\r\n            aKey = a[sortConfig.key]\r\n            bKey = b[sortConfig.key]\r\n        }\r\n        if (aKey < bKey) {\r\n            return sortConfig.direction === 'asc' ? -1 : 1\r\n        }\r\n        if (aKey > bKey) {\r\n            return sortConfig.direction === 'asc' ? 1 : -1\r\n        }\r\n        return 0\r\n    })\r\n}\r\n\r\nconst BtnGroupsValues = {\r\n    column: [0, 1, 2, 3],\r\n    rank: [1, 2, 3, 4],\r\n    rarity: [0, 1, 2, 3]\r\n}\r\n\r\nconst stageDrop = [].concat(...stageDropData.map(chapter => (\r\n    chapter.stages.map(stage => ({\r\n        chapter: chapter.chapter,\r\n        ...stage\r\n    }))\r\n)))\r\n\r\nconst TableWrapper = styled(Scrollable)`\r\n    overflow-x: auto;\r\n    height: calc(100vh - 11rem);\r\n    padding-right: 0;\r\n    margin-right: 0;\r\n    table {\r\n        text-align: center;\r\n    }\r\n`\r\nconst SettingButtonWrapper = styled.div`\r\n    position absolute;\r\n    right: 0;\r\n    top: -4rem;\r\n`\r\nconst Index = () => {\r\n    const { pageString } = useLanguage()\r\n\r\n    const [state, setState] = useState({\r\n        ...BtnGroupsValues,\r\n        column: typeof (window) !== 'undefined' && window.innerWidth < 600 ? [0] : BtnGroupsValues.column,\r\n        isModalOpen: false,\r\n        columnHasMounted: typeof (window) !== 'undefined' && window.innerWidth < 600\r\n            ? [...Array(4).keys()].map((b, i) => i === 0)\r\n            : Array(4).fill(true)\r\n    })\r\n\r\n    const filterBy = (key) => (val) => setState(state => ({\r\n        ...state,\r\n        [key]: val,\r\n        columnHasMounted: key === 'column'\r\n            ? state.columnHasMounted.map((b, i) => b || val.includes(i))\r\n            : state.columnHasMounted\r\n    }))\r\n\r\n    const handleModal = (boolean) => () => setState(state => ({\r\n        ...state,\r\n        isModalOpen: boolean\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <Head\r\n                title={pageString.items.drop.index.helmet.title}\r\n                description={pageString.items.drop.index.helmet.description}\r\n                path='/items/drop/'\r\n            />\r\n            <SettingButtonWrapper>\r\n                <IconButton\r\n                    onClick={handleModal(true)}\r\n                    tooltipText={pageString.items.drop.index.settingTooltip}\r\n                >\r\n                    {SettingIcon}\r\n                </IconButton>\r\n            </SettingButtonWrapper>\r\n            <TableWrapper>\r\n                <SortableTable\r\n                    data={stageDrop}\r\n                    head={<TableHead\r\n                        column={state.column}\r\n                        columnHasMounted={state.columnHasMounted}\r\n                    />}\r\n                    body={<TableBody\r\n                        column={state.column}\r\n                        rarity={state.rarity}\r\n                        rank={state.rank}\r\n                        columnHasMounted={state.columnHasMounted}\r\n                    />}\r\n                    sortFunc={sortFunc}\r\n                    defaultSortKey={'stage'}\r\n                    border\r\n                />\r\n            </TableWrapper>\r\n            <SettingModal\r\n                {...state}\r\n                isModalOpen={state.isModalOpen}\r\n                onClose={handleModal(false)}\r\n                filterBy={filterBy}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index"],"sourceRoot":""}